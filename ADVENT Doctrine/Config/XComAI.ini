; Shadow Ops AI patch

[XComGame.XGAIBehavior]
+m_arrMoveWeightProfile=(Profile=Advent_Generic, fCoverWeight=3.0f, fDistanceWeight=4.0f, fFlankingWeight=2.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=3.0f, fAllyVisWeight=3.0f, fCloseModifier=1.0f, fFarModifier=1.0f) 
+m_arrMoveWeightProfile=(Profile=Advent_Leader, fCoverWeight=4.0f, fDistanceWeight=3.0f, fFlankingWeight=0.5f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=3.0f, fAllyVisWeight=3.0f, fCloseModifier=0.9f, fFarModifier=1.1f) 
+m_arrMoveWeightProfile=(Profile=Advent_NoCover, fCoverWeight=0.0f, fDistanceWeight=4.0f, fFlankingWeight=2.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=3.0f, fAllyVisWeight=3.0f, fCloseModifier=1.0f, fFarModifier=1.0f) 
+m_arrMoveWeightProfile=(Profile=Sectoid, fCoverWeight=4.0f, fDistanceWeight=1.0f, fFlankingWeight=0.5f, fEnemyVisWeight=-2.0f, fEnemyVisWeightPeak1=3.5f, fAllyVisWeight=0.5f, fCloseModifier=0.9f, fFarModifier=1.1f) 
+m_arrMoveWeightProfile=(Profile=Viper, fCoverWeight=2.0f, fDistanceWeight=2.0f, fFlankingWeight=3.0f, fEnemyVisWeight=2.0f, fEnemyVisWeightPeak1=0.0f, fAllyVisWeight=-0.5f, fCloseModifier=1.1f, fFarModifier=0.9f) 
+m_arrMoveWeightProfile=(Profile=Viper_Pull, fCoverWeight=1.0f, fDistanceWeight=2.0f, fFlankingWeight=3.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0f, fAllyVisWeight=-0.5f, fCloseModifier=0.8f, fFarModifier=1.2f) 
+m_arrMoveWeightProfile=(Profile=Muton, fCoverWeight=3.0f, fDistanceWeight=3.0f, fFlankingWeight=3.0f, fEnemyVisWeight=2.0f, fEnemyVisWeightPeak1=0.0f, fAllyVisWeight=2.0f, fCloseModifier=1.0f, fFarModifier=1.0f) 
+m_arrMoveWeightProfile=(Profile=MutonMelee, fCoverWeight=0.3f, fDistanceWeight=3.0f, fFlankingWeight=3.0f, fEnemyVisWeight=2.0f, fEnemyVisWeightPeak1=0.0f, fAllyVisWeight=2.0f, fCloseModifier=1.1f, fFarModifier=0.9f, bPrioritizeClosest=1, bIsMelee=1) 

[XComGame.X2AIBTBehaviorTree]

; This steals control of the AI very early, enabling us to override other AI mods such as A Better ADVENT.
-Behaviors=(BehaviorName=GenericAIRoot, NodeType=Selector, Child[0]=TryNonAggressiveBehavior, Child[1]=TryMindControlledRoot, Child[2]="::CharacterRoot", Child[3]=SkipMove)
+Behaviors=(BehaviorName=GenericAIRoot, NodeType=Selector, Child[0]=TryNonAggressiveBehavior, Child[1]=TryMindControlledRoot, Child[2]="::SOAI_CharacterRoot", Child[3]=SkipMove)

; If we haven't overridden a particular enemy, fall back to the normal behavior.
+Behaviors=(BehaviorName="::SOAI_CharacterRoot", NodeType=Sequence, Child[0]="::CharacterRoot")

; These should definitely be overridden.
+Behaviors=(BehaviorName="::SOAI_FindDestination", NodeType=Sequence, Child[0]=DoRedScreenFailure-BTFailure, Child[1]=FindDestination-Standard)
+Behaviors=(BehaviorName="::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=DoRedScreenFailure-BTFailure, Child[1]=FindRestrictedDestination-Standard)

; Basic movement behaviors

+Behaviors=(BehaviorName=FindDestination-Advent_Generic, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-Advent_Leader, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-Advent_NoCover, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-Sectoid, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-Viper, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-Viper_Pull, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-Muton, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-Advent_Generic, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-Advent_Leader, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-Advent_NoCover, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-Sectoid, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-Viper, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-Viper_Pull, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-Muton, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-MutonMelee, NodeType=Action)

; Template-specific movement

+Behaviors=(BehaviorName="Sectoid::SOAI_FindDestination", NodeType=Sequence, Child[0]=FindDestination-Sectoid)
+Behaviors=(BehaviorName="Sectoid::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=FindRestrictedDestination-Sectoid)

+Behaviors=(BehaviorName="Viper::SOAI_FindDestination", NodeType=Sequence, Child[0]=FindDestination-Viper)
+Behaviors=(BehaviorName="Viper::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=FindRestrictedDestination-Viper)

+Behaviors=(BehaviorName="Muton::SOAI_FindDestination", NodeType=Sequence, Child[0]=FindDestination-Muton)
+Behaviors=(BehaviorName="Muton::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=FindRestrictedDestination-Muton)

; Default behaviors that can be overridden by templates

+Behaviors=(BehaviorName="::SOAI_SafeToMove", NodeType=Sequence, Child[0]=SafeToMove)

; Conditions

+Behaviors=(BehaviorName=IsMyJob-Artillery,	NodeType=Condition)

+Behaviors=(BehaviorName=TemplateNameIs-AdvMEC_M1, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-AdvMEC_M2, NodeType=Condition)

+Behaviors=(BehaviorName=HasAtLeastTwoVisibleAllies, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">=", Param[2]="2")
+Behaviors=(BehaviorName=HasAtLeastThreeVisibleAllies, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">=", Param[2]="3")
+Behaviors=(BehaviorName=HasAtLeastTwoVisibleEnemies, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">=", Param[2]="2")
+Behaviors=(BehaviorName=HasAtLeastThreeVisibleEnemies, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">=", Param[2]="3")
+Behaviors=(BehaviorName=HasSuppressor, NodeType=StatCondition, Param[0]=SuppressorCount, Param[1]=">", Param[2]="0")
+Behaviors=(BehaviorName=ExactlyOneOverwatcher, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]="=", Param[2]="1")
+Behaviors=(BehaviorName=NoMoreThanOneOverwatcher, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]="<", Param[2]="2")
+Behaviors=(BehaviorName=HasOverwatchingTeammate, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">", Param[2]="0", Param[3]="1")

+Behaviors=(BehaviorName=NotLeader, NodeType=Inverter, Child[0]=IsMyJob-Leader)

; Movement

+Behaviors=(BehaviorName=SOAI_Move, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_MoveUnsafe)
+Behaviors=(BehaviorName=SOAI_MoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]="::SOAI_FindDestination", Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_DashMove, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_DashMoveUnsafe)
+Behaviors=(BehaviorName=SOAI_DashMoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=UseDashMovement, Child[2]="::SOAI_FindDestination", Child[3]=SelectAbility-StandardMove)

; Flanking moves

+Behaviors=(BehaviorName=SOAI_TryFlankingMoveIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_TryFlankingMove)
+Behaviors=(BehaviorName=SOAI_TryFlankingMove, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_TryFlankingMoveUnsafe)
+Behaviors=(BehaviorName=SOAI_TryFlankingMoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=SOAI_FindFlankDestination, Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindFlankDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToFlanking, Child[2]=RestrictToEnemyLoS, Child[3]="::SOAI_FindRestrictedDestination")

+Behaviors=(BehaviorName=SOAI_TryFlankingDashMoveIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_TryFlankingDashMove)
+Behaviors=(BehaviorName=SOAI_TryFlankingDashMove, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_TryFlankingDashMoveUnsafe)
+Behaviors=(BehaviorName=SOAI_TryFlankingDashMoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=SOAI_FindFlankDashDestination, Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindFlankDashDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToFlanking, Child[2]=RestrictToEnemyLoS, Child[3]=UseDashMovement, Child[4]="::SOAI_FindRestrictedDestination")

+Behaviors=(BehaviorName=SOAI_TryFlankThenShoot, NodeType=Selector, Child[0]=SOAI_TryMoveForFlankingShot, Child[1]=SOAI_ShootFlankedTarget)
+Behaviors=(BehaviorName=SOAI_TryMoveForFlankingShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=NotLastActionPoint, Child[2]=SOAI_TryFlankingMove)
+Behaviors=(BehaviorName=SOAI_ShootFlankedTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectAnyFlankedTarget, Child[2]=SelectAbility-StandardShot)

+Behaviors=(BehaviorName=SOAI_TryFlankThenShootIfSoldier, NodeType=Sequence, Child[0]=IsMyJob-Soldier, Child[1]=SOAI_TryFlankThenShoot)

; Misc (unsorted)

+Behaviors=(BehaviorName=SOAI_DoIfFlankedMove, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=SOAI_MoveUnsafe)

; Abilities

; Suppression
+Behaviors=(BehaviorName=SOAI_TryMoveThenSuppression, NodeType=Selector, Child[0]=SOAI_TryMoveForSuppression, Child[1]=SuppressIfAvailable)
+Behaviors=(BehaviorName=SOAI_TryMoveForSuppression, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-Suppression, Child[2]=SelectTargetForSuppressionByAim, Child[3]=SOAI_MoveIfFirstAbility-Suppression)

+Behaviors=(BehaviorName=SOAI_FindSuppressionDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=MaybeSetNoCoverMovement, Child[2]=RestrictToAbilityRange-Suppression, Child[3]=RestrictToEnemyLoS, Child[4]="::SOAI_FindRestrictedDestination")
+Behaviors=(BehaviorName=SOAI_MoveIfFirstAbility-Suppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindSuppressionDestination, Child[3]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=SOAI_TryMoveThenSuppressionIfSoldier, NodeType=Sequence, Child[0]=IsMyJob-Soldier, Child[1]=SOAI_TryMoveThenSuppression)
+Behaviors=(BehaviorName=SOAI_TryMoveThenSuppressionIfSupport, NodeType=Sequence, Child[0]=IsMyJob-Support, Child[1]=SOAI_TryMoveThenSuppression)

;  SuppressIfAvailable will always try to suppress, while ConsiderSuppression only suppresses if there are no good shot targets (hit >= 50)
+Behaviors=(BehaviorName=SOAI_TryMoveForSuppressionIfSupport, NodeType=Sequence, Child[0]=IsMyJob-Support, Child[1]=SOAI_TryMoveForSuppression)
+Behaviors=(BehaviorName=SOAI_SuppressIfAvailableIfSupport, NodeType=Sequence, Child[0]=IsMyJob-Support, Child[1]=SuppressIfAvailable)
+Behaviors=(BehaviorName=SOAI_ConsiderSuppressionIfSoldier, NodeType=Sequence, Child[0]=IsMyJob-Soldier, Child[1]=ConsiderSuppression)

; Grenade
+Behaviors=(BehaviorName=SOAI_TryMoveThenGrenade, NodeType=Selector, Child[0]=SOAI_TryMoveForGrenade, Child[1]=TryGrenade)
+Behaviors=(BehaviorName=SOAI_TryMoveForGrenade, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-ThrowGrenade, Child[2]=FindPotentialAoETargets-GrenadeProfile, Child[3]=SOAI_MoveIfFirstAbility-Grenade)
+Behaviors=(BehaviorName=SOAI_MoveIfFirstAbility-Grenade, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindGrenadeDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindGrenadeDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-ThrowGrenade, Child[2]=RestrictToEnemyLoS, Child[3]="::SOAI_FindRestrictedDestination")

+Behaviors=(BehaviorName=SOAI_TryMoveForGrenadeIfArtillery, NodeType=Sequence, Child[0]=IsMyJob-Artillery, Child[1]=SOAI_TryMoveForGrenade)
+Behaviors=(BehaviorName=SOAI_TryGrenadeIfArtillery, NodeType=Sequence, Child[0]=IsMyJob-Artillery, Child[1]=TryGrenade)
+Behaviors=(BehaviorName=SOAI_TryGrenadeIfLeader, NodeType=Sequence, Child[0]=IsMyJob-Leader, Child[1]=TryGrenade)

+Behaviors=(BehaviorName=SOAI_TryMoveThenGrenadeIfArtillery, NodeType=Sequence, Child[0]=IsMyJob-Artillery, Child[1]=SOAI_TryMoveThenGrenade)
+Behaviors=(BehaviorName=SOAI_TryMoveThenGrenadeIfSupport, NodeType=Sequence, Child[0]=IsMyJob-Support, Child[1]=SOAI_TryMoveThenGrenade)

; ------------- ADVENT Doctrine -------------

; For reference, the default AI job list in order is:
; Leader, Aggressor, Soldier, Artillery, Support, Flanker, Soldier, Scout*, Soldier, Observer (x6)
; Note that Scout can be filled by a group not in combat
; Some missions have additional out-of-combat jobs: Terrorist, Hunter, Charger, Defender
;
; The movement priorities of the jobs are:
; 5 Support
; 10 Scout, Soldier, Aggressor
; 20 Leader
; 50 Artillery
; 60 Observer, Flanker, misc. out-of-combat jobs
;
;			CaptM1	TroopM1	StunM1	SBearM2	MECM1	Viper	Muton	Sectoid
; Leader	4		8		7		5		3		6		2		1
; Aggressor	8		6		2		3		5		4		1		7
; Soldier	8		6		2		3		5		4		1		7
; Artillery	4		8		7		6		3		2		1		5
; Support	5		8		7		1		4		6		3		2
; Flanker	8		3		1		4		7		5		2		6

; All ADVENT troops use the same behavior trees, but there are some tree nodes that depend on job. Those are:
; - Leader: Uses a different movement weight profile; will use Mark Target if available; will grenade and micro-missile
; - Aggressor: Will do a flanking dash move to break overwatch
; - Soldier: Will suppress if no good shot
; - Artillery: Will move to grenade position, will grenade and micro-missile
; - Support: Will move to suppress position, will suppress aggressively; will use Mark Target if available
; - Flanker: Will do a flanking dash move to break overwatch

; Template-specific stuff

+Behaviors=(BehaviorName=UsesNoCoverMovement, NodeType=Selector, Child[0]=TemplateNameIs-AdvMEC_M1, Child[1]=TemplateNameIs-AdvMEC_M2)
+Behaviors=(BehaviorName=TrySetNoCoverMovement, NodeType=Sequence, Child[0]=UsesNoCoverMovement, Child[1]=SetNoCoverMovement)
+Behaviors=(BehaviorName=MaybeSetNoCoverMovement, NodeType=Successor, Child[0]=TrySetNoCoverMovement)

; ADVENT movement selection by job
+Behaviors=(BehaviorName=SOAI_FindDestinationByJob-Advent, NodeType=Selector, Child[0]=SOAI_FindDestinationIfLeader-Advent, Child[1]=FindDestination-Advent_Generic)
+Behaviors=(BehaviorName=SOAI_FindDestinationIfLeader-Advent, NodeType=Sequence, Child[0]=IsMyJob-Leader, Child[1]=FindDestination-Advent_Leader)

+Behaviors=(BehaviorName=SOAI_FindRestrictedDestinationByJob-Advent, NodeType=Selector, Child[0]=SOAI_FindRestrictedDestinationIfLeader-Advent, Child[1]=FindRestrictedDestination-Advent_Generic)
+Behaviors=(BehaviorName=SOAI_FindRestrictedDestinationIfLeader-Advent, NodeType=Sequence, Child[0]=IsMyJob-Leader, Child[1]=FindRestrictedDestination-Advent_Leader)

; Flanking moves are used by ADVENT with the Agggressor job. The ADVENT versions have relaxed "safe" restrictions to draw overwatch.
+Behaviors=(BehaviorName=SOAI_TryAggressiveFlankingMove, NodeType=Sequence, Child[0]=NoVisibleSuppressors, Child[1]=NoMoreThanOneOverwatcher, Child[2]=SOAI_TryFlankingMoveUnsafe)
+Behaviors=(BehaviorName=SOAI_TryAggressiveFlankingDashMove, NodeType=Sequence, Child[0]=NoVisibleSuppressors, Child[1]=SOAI_TryFlankingDashMoveUnsafe)

; Special SafeToMove behavior with no randomness.
+Behaviors=(BehaviorName=SOAI_SafeToMove-Advent, NodeType=Sequence, Child[0]=NoVisibleSuppressors, Child[1]=NoVisibleOverwatchers)

; Currently unused
+Behaviors=(BehaviorName=ReloadIfShotAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForStandardShot, Child[2]=NeedsReload)

; These are changed to take all randomness out of the ADVENT AI's decision-making for overwatch. They are, after all, predictable.
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch-Advent, NodeType=Selector, Child[0]=ConsiderTakingOverwatch-Advent, Child[1]=ShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=ConsiderTakingOverwatch-Advent, NodeType=Selector, Child[0]=ConsiderTakingOverwatchAllUnits-Advent)
+Behaviors=(BehaviorName=ConsiderTakingOverwatchAllUnits-Advent, NodeType=Sequence, Child[0]=AllShotPercentagesBelow50, Child[1]=NoOverwatchingTeammates, Child[2]=HasAtLeastThreeVisibleEnemies, Child[3]=HasAtLeastTwoVisibleAllies, Child[4]=TryOverwatch)

; Job-specific behaviors

+Behaviors=(BehaviorName=TryJobSpecificMove-Advent, NodeType=Selector, \\
	Child[0]=SOAI_ConsiderAggressiveFlankIfAggressor, \\
	Child[1]=SOAI_ConsiderAggressiveFlankIfFlanker, \\
	Child[2]=SOAI_TryMoveForSuppressionIfSupport, \\
	Child[3]=SOAI_TryMoveForGrenadeIfArtillery, \\
	Child[4]=SOAI_TryMoveForMicroMissilesIfArtillery-Advent)
+Behaviors=(BehaviorName=TryJobSpecificAction-Advent, NodeType=Selector, \\
	Child[0]=TryMarkTargetOptionIfLeader, \\
	Child[1]=SOAI_TryGrenadeIfLeader, \\
	Child[2]=TryMicroMissilesIfLeader, \\
	Child[3]=TryMicroMissilesMk2IfLeader, \\
	Child[4]=TryMarkTargetOptionIfSupport, \\
	Child[5]=SOAI_SuppressIfAvailableIfSupport, \\
	Child[6]=SOAI_ConsiderSuppressionIfSoldier, \\
	Child[7]=SOAI_TryGrenadeIfArtillery, \\
	Child[8]=TryMicroMissilesIfArtillery, \\
	Child[9]=TryMicroMissilesMk2IfArtillery)

+Behaviors=(BehaviorName=SOAI_ConsiderAggressiveFlankIfAggressor, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AllShotPercentagesBelow50, Child[2]=IsMyJob-Aggressor, Child[3]=SOAI_TryAggressiveFlankingMoveOrDashMove)
+Behaviors=(BehaviorName=SOAI_ConsiderAggressiveFlankIfFlanker, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AllShotPercentagesBelow50, Child[2]=IsMyJob-Flanker, Child[3]=SOAI_TryAggressiveFlankingMoveOrDashMove)
+Behaviors=(BehaviorName=SOAI_TryAggressiveFlankingMoveOrDashMove, NodeType=Selector, Child[0]=SOAI_TryAggressiveFlankingMove, Child[1]=SOAI_ConsiderAggressiveFlankingDashMove)
+Behaviors=(BehaviorName=SOAI_ConsiderAggressiveFlankingDashMove, NodeType=Sequence, Child[0]=HasAtLeastThreeVisibleAllies, Child[1]=SOAI_TryAggressiveFlankingDashMove)

+Behaviors=(BehaviorName=TryMarkTargetOptionIfLeader, NodeType=Sequence, Child[0]=IsMyJob-Leader, Child[1]=TryMarkTargetOption)
+Behaviors=(BehaviorName=TryMarkTargetOptionIfSupport, NodeType=Sequence, Child[0]=IsMyJob-Support, Child[1]=TryMarkTargetOption)

+Behaviors=(BehaviorName=SOAI_TryMoveForMicroMissilesIfArtillery-Advent, NodeType=Sequence, Child[0]=IsMyJob-Artillery, Child[1]=SOAI_TryMoveForMicroMissiles-Advent)
+Behaviors=(BehaviorName=TryMicroMissilesIfArtillery, NodeType=Sequence, Child[0]=IsMyJob-Artillery, Child[1]=TryMicroMissiles)
+Behaviors=(BehaviorName=TryMicroMissilesMk2IfArtillery, NodeType=Sequence, Child[0]=IsMyJob-Artillery, Child[1]=TemplateNameIs-AdvMEC_M2, Child[2]=TryMicroMissilesMk2)
+Behaviors=(BehaviorName=TryMicroMissilesIfLeader, NodeType=Sequence, Child[0]=IsMyJob-Leader, Child[1]=TryMicroMissiles)
+Behaviors=(BehaviorName=TryMicroMissilesMk2IfLeader, NodeType=Sequence, Child[0]=IsMyJob-Leader, Child[1]=TemplateNameIs-AdvMEC_M2, Child[2]=TryMicroMissilesMk2)

+Behaviors=(BehaviorName=SOAI_TryMoveForMicroMissiles-Advent, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-MicroMissiles, Child[2]=FindPotentialAoETargets-MicroMissilesProfile, Child[3]=MoveAdventIfFirstAbility-MicroMissiles)
+Behaviors=(BehaviorName=MoveAdventIfFirstAbility-MicroMissiles, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindMicroMissilesDestination-Advent, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindMicroMissilesDestination-Advent, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=MaybeSetNoCoverMovement, Child[2]=RestrictToAbilityRange-MicroMissiles, Child[3]=RestrictToEnemyLoS, Child[4]="::SOAI_FindRestrictedDestination")

; ADVENT Character roots
+Behaviors=(BehaviorName="AdventTrooper::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventCaptain::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventStunLancer::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventShieldBearer::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventMEC::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventMECMk2::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)

+Behaviors=(BehaviorName="AdventTrooper::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventCaptain::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventStunLancer::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventShieldBearer::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventMEC::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventMECMk2::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)

+Behaviors=(BehaviorName="AdventTrooper::SOAI_FindDestination", NodeType=Selector, Child[0]=SOAI_FindDestinationByJob-Advent)
+Behaviors=(BehaviorName="AdventCaptain::SOAI_FindDestination", NodeType=Selector, Child[0]=SOAI_FindDestinationByJob-Advent)`
+Behaviors=(BehaviorName="AdventStunLancer::SOAI_FindDestination", NodeType=Selector, Child[0]=SOAI_FindDestinationByJob-Advent)
+Behaviors=(BehaviorName="AdventShieldBearer::SOAI_FindDestination", NodeType=Selector, Child[0]=SOAI_FindDestinationByJob-Advent)
+Behaviors=(BehaviorName="AdventMEC::SOAI_FindDestination", NodeType=Sequence, Child[0]=SetNoCoverMovement, Child[1]=FindDestination-Advent_NoCover)
+Behaviors=(BehaviorName="AdventMECMk2::SOAI_FindDestination", NodeType=Sequence, Child[0]=SetNoCoverMovement, Child[1]=FindDestination-Advent_NoCover)

+Behaviors=(BehaviorName="AdventTrooper::SOAI_FindRestrictedDestination", NodeType=Selector, Child[0]=SOAI_FindRestrictedDestinationByJob-Advent)
+Behaviors=(BehaviorName="AdventCaptain::SOAI_FindRestrictedDestination", NodeType=Selector, Child[0]=SOAI_FindRestrictedDestinationByJob-Advent)
+Behaviors=(BehaviorName="AdventStunLancer::SOAI_FindRestrictedDestination", NodeType=Selector, Child[0]=SOAI_FindRestrictedDestinationByJob-Advent)
+Behaviors=(BehaviorName="AdventShieldBearer::SOAI_FindRestrictedDestination", NodeType=Selector, Child[0]=SOAI_FindRestrictedDestinationByJob-Advent)
+Behaviors=(BehaviorName="AdventMEC::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=SetNoCoverMovement, Child[1]=FindRestrictedDestination-Advent_NoCover)
+Behaviors=(BehaviorName="AdventMECMk2::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=SetNoCoverMovement, Child[1]=FindRestrictedDestination-Advent_NoCover)

+Behaviors=(BehaviorName="SOAI_CharacterRoot-Advent", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SOAI_Advent_RedAlert, Child[3]=GenericAlertHandler)

; This covers all the ADVENT unit types (trooper, captain, stun lancer, MEC, and shieldbearer).
; The goal is to give ADVENT units simple, predictable behavior that is still tactically
; effective. There are only two move profiles, one for the current leader and one for other
; units. Other jobs make a difference primarily in action selection.

+Behaviors=(BehaviorName=SOAI_Advent_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SOAI_Advent_RedAbilitySelector)
+Behaviors=(BehaviorName=SOAI_Advent_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SOAI_AdventRedFirstAction, Child[2]=SOAI_AdventRedLastAction)
+Behaviors=(BehaviorName=SOAI_AdventRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_AdventRedFirstActionSelector)
+Behaviors=(BehaviorName=SOAI_AdventRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SOAI_AdventRedLastActionSelector)

+Behaviors=(BehaviorName=SOAI_AdventRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryStunLance, \\
	Child[1]=SOAI_TryMoveForEnergyShield-Advent, \\
	Child[2]=TryEnergyShieldOnMultipleTargets, \\
	Child[3]=TryJobSpecificMove-Advent, \\
	Child[4]=SOAI_DoIfFlankedMove, \\
	Child[5]=TryJobSpecificAction-Advent, \\
	Child[6]=NeedsReload, \\
	Child[7]=SOAI_Move, \\
	Child[8]=TryShootOrReloadOrOverwatch-Advent, \\
	Child[9]=SOAI_DashMove, \\
	Child[10]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SOAI_AdventRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryEnergyShieldOnAnyTarget, \\
	Child[1]=TryJobSpecificAction-Advent, \\
	Child[2]=TryShootOrReloadOrOverwatch-Advent, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SOAI_Move)


+Behaviors=(BehaviorName=ScoreTargetIfPriorityObject, NodeType=Sequence, Child[0]=TargetIsPriorityObject, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=TargetScoreAvoidPriorityObject, NodeType=Selector, Child[0]=ScoreTargetIfPriorityObject, Child[1]=AddToTargetScore_50)
+Behaviors=(BehaviorName=ScoreTargetIfClosestValidTarget, NodeType=Sequence, Child[0]=TargetIsClosestValidTarget, Child[1]=AddToTargetScore_20)
+Behaviors=(BehaviorName=TargetScoreClosestValidTarget, NodeType=Selector, Child[0]=ScoreTargetIfClosestValidTarget, Child[1]=AddToTargetScore_0)

-Behaviors=(BehaviorName=EvaluateTargetForStunLance, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth_HighFirst, Child[2]=TargetScoreMarked, Child[3]=AvoidBoundAndPanickedTargets, Child[4]=TargetScoreCivilian, )
+Behaviors=(BehaviorName=EvaluateTargetForStunLance, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth_HighFirst, Child[2]=TargetScoreMarked, Child[3]=AvoidBoundAndPanickedTargets, Child[4]=TargetScoreCivilian, Child[5]=TargetScoreAvoidPriorityObject, Child[6]=TargetScoreClosestValidTarget)


+Behaviors=(BehaviorName=MoveAdventIfFirstAbility-EnergyShield, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindShieldDestinationAdvent, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_TryMoveForEnergyShield-Advent, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-EnergyShield, Child[2]=NotLastActionPoint, Child[3]=MoveAdventIfFirstAbility-EnergyShield)

+Behaviors=(BehaviorName=FindShieldDestinationAdvent, NodeType=Selector, Child[0]=FindShieldDestinationAdvent_MultipleUnits, Child[1]=FindShieldDestinationAdvent_BestUnit)
+Behaviors=(BehaviorName=FindShieldDestinationAdvent_MultipleUnits, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=MaybeSetNoCoverMovement, Child[2]=RestrictToAlliedAbilityRange-EnergyShield, Child[3]=AddAbilityRangeWeight-EnergyShield, Child[4]="::SOAI_FindRestrictedDestination")
+Behaviors=(BehaviorName=FindShieldDestinationAdvent_BestUnit, NodeType=Sequence, Child[0]=SelectPotentialTargetForEnergyShield, Child[1]=ResetDestinationSearch, Child[2]=MaybeSetNoCoverMovement, Child[3]=RestrictToPotentialTargetRange-EnergyShield, Child[4]="::SOAI_FindRestrictedDestination")


; -------------------- Sectoid AI BEHAVIOR TREE NODES BEGIN -------------------

+Behaviors=(BehaviorName="Sectoid::SOAI_CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SOAI_SectoidRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=SOAI_SectoidRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SOAI_SectoidRedAbilitySelector)
+Behaviors=(BehaviorName=SOAI_SectoidRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SOAI_SectoidRedFirstAction, Child[2]=SOAI_SectoidRedLastAction)
+Behaviors=(BehaviorName=SOAI_SectoidRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_SectoidRedFirstActionSelector)
+Behaviors=(BehaviorName=SOAI_SectoidRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SOAI_SectoidRedLastActionSelector)

; Sectoids are fundamentally cowardly, which they manifest by skulking around the outside of the
; battle trying to only engage one or two enemies at a time. When confronted by multiple enemies,
; they tend to either flee or fire their plasma pistols wildly. When not panicking they prefer
; to use their psi abilities, usually moving to avoid being seen by enemies other than their target.

+Behaviors=(BehaviorName=SOAI_SectoidRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=SOAI_DoIfFlankedMove-Sectoid, \\
	Child[1]=TrySectoidPanic, \\
	Child[2]=SOAI_TryMoveThenPsiReanimationOrMindSpin, \\
	Child[3]=SOAI_Move, \\
	Child[4]=TryPsiReanimationOrMindSpinOption, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SOAI_SectoidRedLastActionSelector, NodeType=Selector, \\
	Child[0]=SOAI_DoIfFlankedMove-Sectoid, \\
	Child[1]=TrySectoidPanic, \\
	Child[2]=TryPsiReanimationOrMindSpinOption, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SOAI_Move)

+Behaviors=(BehaviorName=SOAI_TryMoveThenPsiReanimationOrMindSpin, NodeType=RandSelector, Child[0]=SOAI_TryMoveThenPsiReanimation, Param[0]=66, Child[1]=SOAI_TryMoveThenMindSpin, Param[1]=34)

; Sectoid hiding - these use the standard Sectoid move profile, but restrict to tiles outside of enemy LOS.
+Behaviors=(BehaviorName=SOAI_FindDestinationOutOfEnemyLoS, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictFromKnownEnemyLoS, Child[2]="::SOAI_FindRestrictedDestination")
+Behaviors=(BehaviorName=SOAI_MoveOutOfEnemyLoS, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_MoveUnsafeOutOfEnemyLoS)
+Behaviors=(BehaviorName=SOAI_MoveUnsafeOutOfEnemyLoS, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=SOAI_FindDestinationOutOfEnemyLoS, Child[2]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=SOAI_FindDashDestinationOutOfEnemyLoS, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictFromKnownEnemyLoS, Child[2]=UseDashMovement, Child[3]="::SOAI_FindRestrictedDestination")
+Behaviors=(BehaviorName=SOAI_DashMoveOutOfEnemyLoS, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_DashMoveUnsafeOutOfEnemyLoS)
+Behaviors=(BehaviorName=SOAI_DashMoveUnsafeOutOfEnemyLoS, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=SOAI_FindDashDestinationOutOfEnemyLoS, Child[2]=SelectAbility-StandardMove)

; Sectoids are cowardly and won't move if there are any suppressors or overwatchers.
+Behaviors=(BehaviorName="Sectoid::SOAI_SafeToMove", NodeType=Sequence, Child[0]=NoVisibleSuppressors, Child[1]=NoVisibleOverwatchers)

; Special Sectoid "panic" behavior. A Sectoid in a scary situation has a 50% chance to try to flee to somewhere it can't
; be seen by enemies, and a 50% chance to shoot a random enemy.
+Behaviors=(BehaviorName=TrySectoidPanic, NodeType=Sequence, Child[0]=IsSectoidScared, Child[1]=SectoidPanic)
+Behaviors=(BehaviorName=IsSectoidScared, NodeType=Selector, Child[0]=HasSuppressor, Child[1]=SectoidOutnumberedCheck)
+Behaviors=(BehaviorName=SectoidPanic, NodeType=RandSelector, Child[0]=SectoidPanicMove, Param[0]=50, Child[1]=SectoidPanicFire, Param[1]=50)
+Behaviors=(BehaviorName=SectoidPanicMove, NodeType=Selector, Child[0]=SOAI_MoveOutOfEnemyLoS, Child[1]=SOAI_DashMoveUnsafeOutOfEnemyLoS)
+Behaviors=(BehaviorName=SectoidPanicFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForStandardShot-SectoidPanic, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForStandardShot-SectoidPanic, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=GenericSelectTargetSomewhatRandomly, Child[2]=HasValidTarget-StandardShot)

; A sectoid has a chance to panic if it sees at least two enemies. There is a 20% chance per enemy that the sectoid will
; panic. This works out to the following panic chances:
; Enemies	Chance
; 2			36.0%
; 3			48.8%
; 4			59.0%
; 5			67.2%
; 6			73.8%
+Behaviors=(BehaviorName=HasBTVar-SectoidPanicked, NodeType=Condition)
+Behaviors=(BehaviorName=SetSectoidPanickedTrue, NodeType=Action, Param[0]=SetBTVar, Param[1]="SectoidPanicked", Param[2]="1")
+Behaviors=(BehaviorName=SetSectoidPanickedFalse, NodeType=Action, Param[0]=SetBTVar, Param[1]="SectoidPanicked", Param[2]="0")
+Behaviors=(BehaviorName=IsSectoidPanicked, NodeType=StatCondition, Param[0]=BTVar, Param[1]="!=", Param[2]="0", Param[3]="SectoidPanicked")
+Behaviors=(BehaviorName=InitSectoidPanickedVar, NodeType=Selector, Child[0]=HasBTVar-SectoidPanicked, Child[1]=UpdateSectoidPanickedVar)
+Behaviors=(BehaviorName=UpdateSectoidPanickedVar, NodeType=Selector, Child[0]=TrySetSectoidPanickedTrue, Child[1]=SetSectoidPanickedFalse)
+Behaviors=(BehaviorName=TrySetSectoidPanickedTrue, NodeType=Sequence, Child[0]=SectoidPanicCheck, Child[1]=SetSectoidPanickedTrue)
+Behaviors=(BehaviorName=SectoidPanicCheck, NodeType=Sequence, Child[0]=HasAtLeastTwoVisibleEnemies, Child[1]=SetVisiblePotentialTargetStack, Child[2]=RepeatSectoidPanicRoll, Child[3]=PanicRollFailed)
+Behaviors=(BehaviorName=RepeatSectoidPanicRoll, NodeType=RepeatUntilFail, Child[0]=IterateSectoidPanicRoll)
+Behaviors=(BehaviorName=IterateSectoidPanicRoll, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=Roll80ToNotPanic, Child[2]=PanicRollPassed)
+Behaviors=(BehaviorName=Roll80ToNotPanic, NodeType=RandSelector, Child[0]=SetPanicFalse, Param[0]=80, Child[1]=SetPanicTrue, Param[1]=20)
+Behaviors=(BehaviorName=SetPanicTrue, NodeType=Action, Param[0]=SetBTVar, Param[1]="Panic", Param[2]="1")
+Behaviors=(BehaviorName=SetPanicFalse, NodeType=Action, Param[0]=SetBTVar, Param[1]="Panic", Param[2]="0")
+Behaviors=(BehaviorName=PanicRollFailed, NodeType=StatCondition, Param[0]=BTVar, Param[1]="!=", Param[2]="0", Param[3]="Panic")
+Behaviors=(BehaviorName=PanicRollPassed, NodeType=StatCondition, Param[0]=BTVar, Param[1]="==", Param[2]="0", Param[3]="Panic")

+Behaviors=(BehaviorName=SectoidOutnumberedCheck, NodeType=Sequence, Child[0]=InitSectoidPanickedVar, Child[1]=IsSectoidPanicked)

; Psi Reanimation behaviors
+Behaviors=(BehaviorName=IsAbilityReady-PsiReanimation, NodeType=Condition)
+Behaviors=(BehaviorName=RestrictToAbilityRange-PsiReanimation, NodeType=Action)

+Behaviors=(BehaviorName=SOAI_TryMoveThenPsiReanimation, NodeType=Selector, Child[0]=SOAI_TryMoveForPsiReanimation, Child[1]=TryPsiReanimation)
+Behaviors=(BehaviorName=SOAI_TryMoveForPsiReanimation, NodeType=Sequence, Child[0]="Sectoid::SOAI_SafeToMove", Child[1]=IsAbilityReady-PsiReanimation, Child[2]=SelectTargetForPsiReanimation, Child[3]=SOAI_MoveSectoidIfFirstAbility-PsiReanimation)
+Behaviors=(BehaviorName=SOAI_MoveSectoidIfFirstAbility-PsiReanimation, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindPsiReanimationDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindPsiReanimationDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-PsiReanimation, Child[2]="Sectoid::SOAI_FindRestrictedDestination")

; Mind Spin behaviors
+Behaviors=(BehaviorName=IsAbilityReady-MindSpin, NodeType=Condition)
+Behaviors=(BehaviorName=RestrictToAbilityRange-MindSpin, NodeType=Action)

+Behaviors=(BehaviorName=SOAI_TryMoveThenMindSpin, NodeType=Selector, Child[0]=SOAI_TryMoveForMindSpin, Child[1]=TryMindSpinOption)
+Behaviors=(BehaviorName=SOAI_TryMoveForMindSpin, NodeType=Sequence, Child[0]="Sectoid::SOAI_SafeToMove", Child[1]=IsAbilityReady-MindSpin, Child[2]=SelectTargetForMindSpin, Child[3]=SOAI_MoveSectoidIfFirstAbility-MindSpin)
+Behaviors=(BehaviorName=SOAI_MoveSectoidIfFirstAbility-MindSpin, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindMindSpinDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindMindSpinDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-MindSpin, Child[2]=RestrictToEnemyLOS, Child[3]="Sectoid::SOAI_FindRestrictedDestination")

; Special Sectoid flanked move behaviors - try to move out of enemy LOS entirely when flanked.
+Behaviors=(BehaviorName=SOAI_DoIfFlankedMove-Sectoid, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=FlankedMove-Sectoid)
+Behaviors=(BehaviorName=FlankedMove-Sectoid, NodeType=Selector, Child[0]=SOAI_MoveUnsafeOutOfEnemyLoS, Child[1]=SOAI_MoveUnsafe)

; -------------------- Viper --------------------------------------------------

+Behaviors=(BehaviorName="Viper::SOAI_CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SOAI_ViperRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=SOAI_ViperRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SOAI_ViperRedAbilitySelector)
+Behaviors=(BehaviorName=SOAI_ViperRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SOAI_ViperRedFirstAction, Child[2]=SOAI_ViperRedLastAction)
+Behaviors=(BehaviorName=SOAI_ViperRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_ViperRedFirstActionSelector)
+Behaviors=(BehaviorName=SOAI_ViperRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SOAI_ViperRedLastActionSelector)

; Vipers are predatory. They prefer to isolate single targets and crush them. If threatened up close, they tend to use
; their poison spit to disable the enemy. They like high places and happily use their plasma guns if they have a 
; good shot. Vipers are naturally solitary and tend to ignore the rest of the alien group to do their own thing.

+Behaviors=(BehaviorName=SOAI_ViperRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=StandardMeleeAttack, \\
	Child[1]=TryGetOverHereFlankingOnly, \\
	Child[2]=TryViperPriority0Action, \\
	Child[3]=TryViperPriority1Action, \\
	Child[4]=TryViperPriority2Action, \\
	Child[5]=SOAI_Move, \\
	Child[6]=TryViperPriority3Action, \\
	Child[7]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SOAI_ViperRedLastActionSelector, NodeType=Selector, \\
    Child[0]=StandardMeleeAttack, \\
	Child[1]=TryGetOverHereFlankingOnly, \\
	Child[2]=TryViperPriority0Action, \\
	Child[3]=TryViperPriority1Action, \\
	Child[4]=TryViperPriority2Action, \\
	Child[5]=TryViperPriority3Action, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=SOAI_Move)

+Behaviors=(BehaviorName=TryViperPriority0Action, NodeType=RandSelector,	Child[0]=DoIfFlankedMove,								Param[0]=25, \\
																			Child[1]=TryPoisonSpit,									Param[1]=75)
+Behaviors=(BehaviorName=TryViperPriority1Action, NodeType=RandSelector,	Child[0]=SOAI_TryMoveThenGetOverHere,					Param[0]=50, \\
																			Child[1]=SOAI_TryFlankingMoveIfFirstAbility,			Param[1]=25, \\
																			Child[2]=TryStandardMelee,								Param[2]=25)
+Behaviors=(BehaviorName=TryViperPriority2Action, NodeType=RandSelector,	Child[0]=SOAI_TryMoveThenPoisonSpit,					Param[0]=25, \\
																			Child[1]=SOAI_TryFlankingDashMoveIfFirstAbility,		Param[1]=50, \\
																			Child[2]=NeedsReload,									Param[2]=25)
+Behaviors=(BehaviorName=TryViperPriority3Action, NodeType=RandSelector,	Child[0]=TryPoisonSpitSingle,							Param[0]=25, \\
																			Child[1]=TryShootOrReloadOrOverwatch,					Param[1]=50, \\
																			Child[2]=TryGetOverHere,								Param[2]=25)

; Use Viper movement profile for abilities

+Behaviors=(BehaviorName=SOAI_TryMoveThenPoisonSpit, NodeType=Selector, Child[0]=SOAI_TryMoveForPoisonSpit, Child[1]=TryPoisonSpit)
+Behaviors=(BehaviorName=SOAI_TryMoveForPoisonSpit, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-PoisonSpit, Child[2]=FindPotentialAoETargets-PoisonSpitProfile, Child[3]=SOAI_MoveStandardIfFirstAbility-PoisonSpit)

+Behaviors=(BehaviorName=SOAI_TryMoveThenPoisonSpitSingle, NodeType=Selector, Child[0]=SOAI_TryMoveForPoisonSpitSingle, Child[1]=TryPoisonSpitSingle)
+Behaviors=(BehaviorName=SOAI_TryMoveForPoisonSpitSingle, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-PoisonSpit, Child[2]=FindPotentialAoETargets-PoisonSpitSingleProfile, Child[3]=SOAI_MoveStandardIfFirstAbility-PoisonSpit)

+Behaviors=(BehaviorName=SOAI_MoveStandardIfFirstAbility-PoisonSpit, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindPoisonSpitDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindPoisonSpitDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-PoisonSpit, Child[2]=RestrictToEnemyLoS, Child[3]="Viper::SOAI_FindRestrictedDestination")

; Tongue pull behaviors
+Behaviors=(BehaviorName=IsAbilityReady-GetOverHere, NodeType=Condition)
+Behaviors=(BehaviorName=RestrictToAbilityRange-GetOverHere, NodeType=Action)

+Behaviors=(BehaviorName=SOAI_TryMoveThenGetOverHere, NodeType=Selector, Child[0]=SOAI_TryMoveForGetOverHere, Child[1]=TryGetOverHereFlankingOnly)
+Behaviors=(BehaviorName=SOAI_TryMoveForGetOverHere, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-GetOverHere, Child[2]=SelectTargetForGetOverHere, Child[3]=SOAI_MoveViperIfFirstAbility-GetOverHere)
+Behaviors=(BehaviorName=SOAI_MoveViperIfFirstAbility-GetOverHere, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindGetOverHereDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindGetOverHereDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-GetOverHere, Child[2]=RestrictToFlanking, Child[3]=RestrictToEnemyLOS, Child[4]=FindRestrictedDestination-Viper_Pull)

-Behaviors=(BehaviorName=TargetSelectIterationForGetOverHere, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=GenericTargetEvaluations, Child[2]=TargetScoreInvalidateCivilians, Child[3]=SSTargetScoreInvalidTonguePullTargets, Child[4]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetSelectIterationForGetOverHere, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=GenericTargetEvaluations, Child[2]=TargetScoreInvalidateCivilians, Child[3]=SSTargetScoreInvalidTonguePullTargets, Child[4]=TargetScoreClosestValidTarget, Child[5]=UpdateBestTarget)

+Behaviors=(BehaviorName=TryGetOverHereFlankingOnly, NodeType=Sequence, Child[0]=IsAbilityAvailable-GetOverHere, Child[1]=SelectTargetForGetOverHereFlankingOnly, Child[2]=SelectAbility-GetOverHere)

+Behaviors=(BehaviorName=SelectTargetForGetOverHereFlankingOnly, NodeType=Sequence, Child[0]=SetTargetStack-GetOverHere, Child[1]=SelectBestTargetForGetOverHereFlankingOnly, Child[2]=HasValidTarget-GetOverHere)
+Behaviors=(BehaviorName=SelectBestTargetForGetOverHereFlankingOnly, NodeType=RepeatUntilFail, Child[0]=TargetSelectIterationForGetOverHereFlankingOnly)
+Behaviors=(BehaviorName=TargetSelectIterationForGetOverHereFlankingOnly, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=GenericTargetEvaluations, Child[2]=TargetScoreInvalidateCivilians, Child[3]=SSTargetScoreInvalidTonguePullTargets, Child[4]=TargetScoreClosestValidTarget, Child[5]=TargetScoreFlankingOnly, Child[6]=UpdateBestTarget)

+Behaviors=(BehaviorName=TargetScoreFlankingOnly, NodeType=Selector, Child[0]=ScoreTargetIfFlanked, Child[1]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=ScoreTargetIfFlankedOnly, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=AddToTargetScore_0) 

; -------------------- Muton --------------------------------------------------

; Mutons are disciplined and tactical, but somewhat unpredictable.

; General pattern:
; If one muton, the Leader makes ranged attacks.
; If two mutons, the Leader makes ranged attacks while the Aggressor closes to melee.
; If three mutons, the Leader makes ranged attacks, the Aggressor closes to melee, and the Soldier suppresses.
+Behaviors=(BehaviorName="Muton::SOAI_CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SOAI_MutonRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=SOAI_MutonRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SOAI_MutonRedAbilitySelector)
+Behaviors=(BehaviorName=SOAI_MutonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SOAI_MutonRedFirstAction, Child[2]=SOAI_MutonRedLastAction)
+Behaviors=(BehaviorName=SOAI_MutonRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_MutonRedFirstActionSelector)
+Behaviors=(BehaviorName=SOAI_MutonRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SOAI_MutonRedLastActionSelector)

+Behaviors=(BehaviorName=SOAI_MutonRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=BayonetAttack, \\
	Child[1]=TryMutonBloodlustBehavior, \\
	Child[2]=SOAI_DoIfFlankedMove, \\
	Child[3]=TryMutonJobBehavior, \\
	Child[4]=NeedsReload, \\
	Child[5]=TryMutonGenericBehavior, \\
	Child[6]=SOAI_Move, \\
	Child[7]=TryShootOrReloadOrOverwatch, \\
	Child[8]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SOAI_MutonRedLastActionSelector, NodeType=Selector, \\
	Child[0]=BayonetAttack, \\
	Child[1]=TryMutonBloodlustBehavior, \\
	Child[2]=TryMutonJobBehavior, \\
	Child[3]=TryMutonGenericBehavior, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SOAI_Move) 

; 
+Behaviors=(BehaviorName=TryMutonBloodlustBehavior, NodeType=Sequence, Child[0]=CheckMutonBloodlustVar, Child[1]=MutonBloodlustBehavior)
+Behaviors=(BehaviorName=MutonBloodlustBehavior, NodeType=RandSelector, \\
	Child[0]=TryBayonet,					Param[0]=20, \\
	Child[1]=SOAI_TryMoveThenGrenade,		Param[1]=20, \\
	Child[2]=TryHuntWoundedTarget,			Param[2]=20, \\
	Child[3]=SOAI_TryFlankThenShoot,		Param[3]=20, \\
	Child[4]=SOAI_DashMove,				Param[4]=20)
+Behaviors=(BehaviorName=TryMutonJobBehavior, NodeType=Selector, \\
	Child[0]=SOAI_TryFlankThenShootIfSoldier, \\
	Child[1]=SOAI_TryMoveThenSuppressionIfSoldier, \\
	Child[2]=TryBayonetIfAggressor, \\
	Child[3]=SOAI_TryMoveThenGrenadeIfArtillery, \\
	Child[4]=SOAI_TryMoveThenGrenadeIfSupport, \\
	Child[5]=SOAI_TryMoveThenSuppressionIfSupport)
+Behaviors=(BehaviorName=TryMutonGenericBehavior, NodeType=RandSelector, \\
	Child[0]=TryBayonet,					Param[0]=50, \\
	Child[1]=SOAI_TryMoveThenGrenade,		Param[1]=25, \\
	Child[2]=SOAI_TryFlankThenShoot,		Param[2]=25)

+Behaviors=(BehaviorName=TryHuntWoundedTarget, NodeType=Selector, Child[0]=SOAI_TryMoveForHuntWounded-Muton, Child[1]=ShootWoundedTarget)
+Behaviors=(BehaviorName=SOAI_TryMoveForHuntWounded-Muton, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityAvailable-StandardShot, Child[2]=SelectTarget_HuntWounded, Child[3]=SOAI_MoveMutonIfFirstAbility-StandardShot)
+Behaviors=(BehaviorName=ShootWoundedTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTarget_HuntWounded, Child[2]=SelectAbility-StandardShot) 
+Behaviors=(BehaviorName=FindStandardShotDestination-Muton, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=MaybeSetNoCoverMovement, Child[2]=RestrictToAbilityRange-StandardShot, Child[3]=RestrictToEnemyLoS, Child[4]="Muton::SOAI_FindRestrictedDestination")
+Behaviors=(BehaviorName=SOAI_MoveMutonIfFirstAbility-StandardShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindStandardShotDestination-Muton, Child[3]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=SelectTarget_HuntWounded, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetOPPORTUNIST)
+Behaviors=(BehaviorName=EvaluateTargetHuntWounded, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreTargetHuntWounded)
+Behaviors=(BehaviorName=SSScoreTargetHuntWounded, NodeType=Successor, Child[0]=ScoreTargetHuntWounded)
+Behaviors=(BehaviorName=ScoreTargetHuntWounded, NodeType=Sequence, Child[0]=TargetHasLowHP, Child[1]=GenericTargetEvaluations, Child[2]=UpdateBestTarget)

-Behaviors=(BehaviorName=BayonetStepSelector, NodeType=Selector, Child[0]=BayonetAttack, Child[1]=MoveMeleeDefensiveIfFirstAbility)
+Behaviors=(BehaviorName=BayonetStepSelector, NodeType=Selector, Child[0]=BayonetAttack, Child[1]=BayonetMove)
+Behaviors=(BehaviorName=BayonetMove, NodeType=Sequence, Child[0]=MoveMutonMeleeIfFirstAbility, Child[1]=SetForceBayonet)
+Behaviors=(BehaviorName=MoveMutonMeleeIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_Move-MutonMelee)
+Behaviors=(BehaviorName=SOAI_Move-MutonMelee, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_MoveUnsafe-MutonMelee)
+Behaviors=(BehaviorName=SOAI_MoveUnsafe-MutonMelee, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestination-MutonMelee, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindDestination-MutonMelee, NodeType=Sequence, Child[0]=IncludeCiviliansIfTerrorist, Child[1]=SelectPotentialMeleeTarget, Child[2]=RestrictToPotentialTargetRange-StandardMelee, Child[3]=FindRestrictedDestination-MutonMelee)
+Behaviors=(BehaviorName=SetForceBayonet, NodeType=Action, Param[0]=SetBTVar, Param[1]="ForceBayonet", Param[2]="1")
+Behaviors=(BehaviorName=HasBTVar-ForceBayonet, NodeType=Condition)
+Behaviors=(BehaviorName=TryForcedBayonet, NodeType=Sequence, Child[0]=HasBTVar-ForceBayonet, Child[1]=BayonetAttack)

+Behaviors=(BehaviorName=TryBayonetIfAggressor, NodeType=Sequence, Child[0]=IsMyJob-Aggressor, Child[1]=TryBayonet)

; Movement

; Muton bloodlust - Mutons have a chance of ignoring their job and picking whatever action they like best
+Behaviors=(BehaviorName=CheckMutonBloodlustVar, NodeType=Sequence, Child[0]=InitMutonBloodlustVar, Child[1]=HasMutonBloodlust)
+Behaviors=(BehaviorName=HasMutonBloodlust, NodeType=StatCondition, Param[0]=BTVar, Param[1]="!=", Param[2]="0", Param[3]="HasMutonBloodlust")
+Behaviors=(BehaviorName=InitMutonBloodlustVar, NodeType=Selector, Child[0]=HasBTVar-MutonBloodlust, Child[1]=UpdateMutonBloodlustVar)
+Behaviors=(BehaviorName=HasBTVar-MutonBloodlust, NodeType=Condition)
+Behaviors=(BehaviorName=UpdateMutonBloodlustVar, NodeType=RandSelector, Child[0]=SetMutonBloodlustTrue, Param[0]=33, Child[1]=SetMutonBloodlustFalse, Param[1]=67)
+Behaviors=(BehaviorName=SetMutonBloodlustTrue, NodeType=Action, Param[0]=SetBTVar, Param[1]="MutonBloodlust", Param[2]="1")
+Behaviors=(BehaviorName=SetMutonBloodlustFalse, NodeType=Action, Param[0]=SetBTVar, Param[1]="MutonBloodlust", Param[2]="0")

