; Shadow Ops AI patch

; Naming conventions

; Conditions-like nodes (nodes whose only purpose is to return true or false) should start with "Has", "Is", "Are", or "Check".
; RepeatUntilFail nodes start with "Repeat" or "Select".
; Children of RepeatUntilFail start with "Iterate" or "Evaluate".
; Nodes that check a condition and then try to perform an action (beyond just checking the action is possible) start with "Try" or "Maybe".
; Nodes that try to perform an action if possible may start with "Do" or "Try".

[XComGame.XGAIBehavior]
+m_arrMoveWeightProfile=(Profile=SOAI_Advent_Generic, fCoverWeight=2.0f, fDistanceWeight=4.0f, fFlankingWeight=2.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=3.0f, fAllyVisWeight=3.0f, fCloseModifier=1.0f, fFarModifier=1.0f) 
+m_arrMoveWeightProfile=(Profile=SOAI_Advent_Leader, fCoverWeight=4.0f, fDistanceWeight=3.0f, fFlankingWeight=0.5f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=3.0f, fAllyVisWeight=3.0f, fCloseModifier=0.9f, fFarModifier=1.1f) 
+m_arrMoveWeightProfile=(Profile=SOAI_Advent_Sniper, fCoverWeight=3.0f, fDistanceWeight=4.0f, fFlankingWeight=0.5f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=1.0f, fAllyVisWeight=1.0f, fCloseModifier=0.5f, fFarModifier=1.5f) 
+m_arrMoveWeightProfile=(Profile=SOAI_Advent_MEC, fCoverWeight=0.0f, fDistanceWeight=4.0f, fFlankingWeight=2.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=3.0f, fAllyVisWeight=3.0f, fCloseModifier=1.0f, fFarModifier=1.0f) 
+m_arrMoveWeightProfile=(Profile=SOAI_Sectoid, fCoverWeight=4.0f, fDistanceWeight=1.0f, fFlankingWeight=0.5f, fEnemyVisWeight=-2.0f, fEnemyVisWeightPeak1=4.0f, fAllyVisWeight=0.5f, fCloseModifier=0.9f, fFarModifier=1.1f) 
+m_arrMoveWeightProfile=(Profile=SOAI_Viper, fCoverWeight=1.5f, fDistanceWeight=2.0f, fFlankingWeight=3.0f, fEnemyVisWeight=2.0f, fEnemyVisWeightPeak1=0.0f, fAllyVisWeight=-0.5f, fCloseModifier=1.1f, fFarModifier=0.9f) 
+m_arrMoveWeightProfile=(Profile=SOAI_Viper_Pull, fCoverWeight=1.0f, fDistanceWeight=2.0f, fFlankingWeight=3.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0f, fAllyVisWeight=-0.5f, fCloseModifier=0.8f, fFarModifier=1.2f) 
+m_arrMoveWeightProfile=(Profile=SOAI_Viper_Defensive, fCoverWeight=2.5f, fDistanceWeight=2.0f, fFlankingWeight=2.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0f, fAllyVisWeight=-0.5f, fCloseModifier=0.9f, fFarModifier=1.1f) 
+m_arrMoveWeightProfile=(Profile=SOAI_Muton, fCoverWeight=3.0f, fDistanceWeight=3.0f, fFlankingWeight=3.0f, fEnemyVisWeight=2.0f, fEnemyVisWeightPeak1=0.0f, fAllyVisWeight=2.0f, fCloseModifier=1.0f, fFarModifier=1.0f) 
+m_arrMoveWeightProfile=(Profile=SOAI_MutonMelee, fCoverWeight=0.3f, fDistanceWeight=3.0f, fFlankingWeight=3.0f, fEnemyVisWeight=2.0f, fEnemyVisWeightPeak1=0.0f, fAllyVisWeight=2.0f, fCloseModifier=1.1f, fFarModifier=0.9f, bPrioritizeClosest=1, bIsMelee=1) 
+m_arrMoveWeightProfile=(Profile=SOAI_Cyberus, fCoverWeight=2.0f, fDistanceWeight=1.0f, fFlankingWeight=5.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=1.0f, fFarModifier=1.0f)

; ABA AOE profiles - copied here to avoid redscreens
+AoEProfiles=( Profile=GrenadeSingleProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1)
+AoEProfiles=( Profile=FirebreathProfile, Ability=Firebreath, bIgnoreSelfDamage=True, MinTargets=1) ; could potentially be 2 or even 3. But i want him to spit flames as much as possible *shrug* Change it yourself if you want.
+AoEProfiles=( Profile=ChrysSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=True, MinTargets=1) ; ChrysSpit is a singletarget ability. So don't change MinTargets on this one...

-CALC_NO_COVER_FACTOR=-4.0f
-CALC_MID_COVER_FACTOR=1.0f 
-CALC_FULL_COVER_FACTOR=1.1f 
-CALC_FULL_COVER_FACTOR_POD_LEADER=2.5f

+CALC_NO_COVER_FACTOR=-4.0f;
+CALC_MID_COVER_FACTOR=0.0f;
+CALC_FULL_COVER_FACTOR=1.0f;
+CALC_FULL_COVER_FACTOR_POD_LEADER=1.0f;

; Undo ABA cover value changes
-CALC_MID_COVER_FACTOR=1.5f 
-CALC_FULL_COVER_FACTOR=2.5f 
-CALC_FULL_COVER_FACTOR_POD_LEADER=3f

[XComGame.X2AIBTBehaviorTree]

;;; Custom nodes
+CustomNodes=(NodeTypeString="SOAIAction", ExtendsFromType="Action", ClassName="AdventDoctrine.X2AIBTAdventDoctrineActions")
+CustomNodes=(NodeTypeString="SOAICondition", ExtendsFromType="Condition", ClassName="AdventDoctrine.X2AIBTAdventDoctrineConditions")

; These play an animation and return SUCCESS.
+Behaviors=(BehaviorName=PlayAnimation-HL_SignalPositiveA, NodeType=SOAIAction);
+Behaviors=(BehaviorName=PlayAnimation-HL_CallReinforcementsA, NodeType=SOAIAction);
+Behaviors=(BehaviorName=PlayAnimation-HL_SignalNegativeA, NodeType=SOAIAction);

+Behaviors=(BehaviorName=DoesTargetHaveItem-Skulljack, NodeType=SOAICondition);

+Behaviors=(BehaviorName=HasItem-FlashbangGrenade, NodeType=SOAICondition);

;;; Character root

; This steals control of the AI very early, enabling us to override other AI mods such as A Better ADVENT.
-Behaviors=(BehaviorName=GenericAIRoot, NodeType=Selector, Child[0]=TryNonAggressiveBehavior, Child[1]=TryMindControlledRoot, Child[2]="::CharacterRoot", Child[3]=SkipMove)
+Behaviors=(BehaviorName=GenericAIRoot, NodeType=Selector, Child[0]=TryNonAggressiveBehavior, Child[1]=TryMindControlledRoot, Child[2]="::SOAI_CharacterRoot", Child[3]=SkipMove)

;;; Default behaviors that can be overridden for particular enemies

; If we haven't overridden a particular enemy, fall back to the normal behavior.
+Behaviors=(BehaviorName="::SOAI_CharacterRoot", NodeType=Sequence, Child[0]="::CharacterRoot")

+Behaviors=(BehaviorName="::SOAI_SafeToMove", NodeType=Sequence, Child[0]=SafeToMove)

+Behaviors=(BehaviorName="::SOAI_TargetEvaluations", NodeType=Sequence, Child[0]=GenericTargetEvaluations)

;;; Behaviors that must be be overridden.

+Behaviors=(BehaviorName="::SOAI_FindDestination", NodeType=Sequence, Child[0]=DoRedScreenFailure-BTFailure, Child[1]=FindDestination-Standard)
+Behaviors=(BehaviorName="::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=DoRedScreenFailure-BTFailure, Child[1]=FindRestrictedDestination-Standard)

;;; Basic movement behaviors

+Behaviors=(BehaviorName=FindDestination-SOAI_Advent_Generic, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-SOAI_Advent_Leader, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-SOAI_Advent_Sniper, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-SOAI_Advent_MEC, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-SOAI_Sectoid, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-SOAI_Viper, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-SOAI_Viper_Pull, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-SOAI_Viper_Defensive, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-SOAI_Muton, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-SOAI_Cyberus, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_Advent_Generic, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_Advent_Leader, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_Advent_Sniper, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_Advent_MEC, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_Sectoid, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_Viper, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_Viper_Pull, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_Viper_Defensive, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_Muton, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_MutonMelee, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SOAI_Cyberus, NodeType=Action)

;;; Conditions

+Behaviors=(BehaviorName=IsMyPreferredJob-Aggressor,	NodeType=SOAICondition)
+Behaviors=(BehaviorName=IsMyPreferredJob-Artillery,	NodeType=SOAICondition)
+Behaviors=(BehaviorName=IsMyPreferredJob-Flanker,		NodeType=SOAICondition)
+Behaviors=(BehaviorName=IsMyPreferredJob-Leader,		NodeType=SOAICondition)
+Behaviors=(BehaviorName=IsMyPreferredJob-Soldier,		NodeType=SOAICondition)
+Behaviors=(BehaviorName=IsMyPreferredJob-Sniper,		NodeType=SOAICondition)
+Behaviors=(BehaviorName=IsMyPreferredJob-Support,		NodeType=SOAICondition)

+Behaviors=(BehaviorName=TemplateNameIs-AdvMEC_M1, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-AdvMEC_M2, NodeType=Condition)

+Behaviors=(BehaviorName=SOAI_HasNoVisibleAllies, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]="=", Param[2]="0")
+Behaviors=(BehaviorName=SOAI_HasAtLeastTwoVisibleAllies, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">=", Param[2]="2")
+Behaviors=(BehaviorName=SOAI_HasAtLeastThreeVisibleAllies, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">=", Param[2]="3")
+Behaviors=(BehaviorName=SOAI_HasAtLeastTwoVisibleEnemies, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">=", Param[2]="2")
+Behaviors=(BehaviorName=SOAI_HasAtLeastThreeVisibleEnemies, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">=", Param[2]="3")
+Behaviors=(BehaviorName=SOAI_HasSuppressor, NodeType=StatCondition, Param[0]=SuppressorCount, Param[1]=">", Param[2]="0")
+Behaviors=(BehaviorName=SOAI_HasExactlyOneOverwatcher, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]="=", Param[2]="1")
+Behaviors=(BehaviorName=SOAI_HasNoMoreThanOneOverwatcher, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]="<", Param[2]="2")
+Behaviors=(BehaviorName=SOAI_HasOverwatchingTeammate, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">", Param[2]="0", Param[3]="1")

+Behaviors=(BehaviorName=SOAI_TargetIsWounded, NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]="<=", Param[2]="90%")

;;; Conditions for "A Better ADVENT" compatibility

+Behaviors=(BehaviorName=IsAbilityAvailable-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-SniperStandardFire, NodeType=Condition)

+Behaviors=(BehaviorName=IsAbilityAvailable-LightningHands, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LightningHands, NodeType=Condition)

+Behaviors=(BehaviorName=IsAbilityAvailable-Faceoff, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Faceoff, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Faceoff, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-Faceoff, NodeType=Condition)

+Behaviors=(BehaviorName=IsAbilityAvailable-FireTazer, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-FireTazer, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-FireTazer, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-FireTazer, NodeType=Condition)

+Behaviors=(BehaviorName=SelectAbility-AidProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AidProtocol, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityReady-AidProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AidProtocol, NodeType=Condition)

+Behaviors=(BehaviorName=SelectAbility-GremlinHeal, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-GremlinHeal, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityReady-GremlinHeal, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-GremlinHeal, NodeType=Condition)

+Behaviors=(BehaviorName=SelectAbility-AdvFuseProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvFuseProtocol, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityReady-AdvFuseProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvFuseProtocol, NodeType=Condition)

+Behaviors=(BehaviorName=IsAbilityAvailable-ReinforceABA, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-ReinforceABA, NodeType=Action)

+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeSingleProfile, NodeType=Action)

;;; Movement

+Behaviors=(BehaviorName=SOAI_Move, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_MoveUnsafe)
+Behaviors=(BehaviorName=SOAI_MoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]="::SOAI_FindDestination", Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_DashMove, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_DashMoveUnsafe)
+Behaviors=(BehaviorName=SOAI_DashMoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=UseDashMovement, Child[2]="::SOAI_FindDestination", Child[3]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=SOAI_MoveOrTeleport, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_MoveOrTeleportUnsafe)
+Behaviors=(BehaviorName=SOAI_MoveOrTeleportUnsafe, NodeType=Selector, Child[0]=SOAI_TeleportUnsafe, Child[1]=SOAI_MoveUnsafe);
+Behaviors=(BehaviorName=SOAI_DashMoveOrTeleport, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_DashMoveOrTeleportUnsafe)
+Behaviors=(BehaviorName=SOAI_DashMoveOrTeleportUnsafe, NodeType=Selector, Child[0]=SOAI_TeleportUnsafe, Child[1]=SOAI_DashMoveUnsafe);
+Behaviors=(BehaviorName=SOAI_TeleportUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-Teleport, Child[1]=UseDashMovement, Child[2]="::SOAI_FindDestination", Child[3]=SelectAbility-Teleport)

;;; Flanking moves

+Behaviors=(BehaviorName=SOAI_TryFlankingMoveIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_TryFlankingMove)
+Behaviors=(BehaviorName=SOAI_TryFlankingMove, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_TryFlankingMoveUnsafe)
+Behaviors=(BehaviorName=SOAI_TryFlankingMoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=SOAI_FindFlankDestination, Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindFlankDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToFlanking, Child[2]=RestrictToEnemyLoS, Child[3]="::SOAI_FindRestrictedDestination")

+Behaviors=(BehaviorName=SOAI_TryFlankingDashMoveIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_TryFlankingDashMove)
+Behaviors=(BehaviorName=SOAI_TryFlankingDashMove, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_TryFlankingDashMoveUnsafe)
+Behaviors=(BehaviorName=SOAI_TryFlankingDashMoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=SOAI_FindFlankDashDestination, Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindFlankDashDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToFlanking, Child[2]=RestrictToEnemyLoS, Child[3]=UseDashMovement, Child[4]="::SOAI_FindRestrictedDestination")

;;; Standard behaviors

+Behaviors=(BehaviorName=SOAI_DoIfFlankedMove, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=SOAI_MoveOrTeleportUnsafe)

;;; Actions - standard attacks

+Behaviors=(BehaviorName=SOAI_TryFlankThenShoot, NodeType=Selector, Child[0]=SOAI_TryMoveForFlankingShot, Child[1]=SOAI_ShootFlankedTarget)
+Behaviors=(BehaviorName=SOAI_TryMoveForFlankingShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=NotLastActionPoint, Child[2]=SOAI_TryFlankingMove)
+Behaviors=(BehaviorName=SOAI_ShootFlankedTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectAnyFlankedTarget, Child[2]=SelectAbility-StandardShot)

+Behaviors=(BehaviorName=SOAI_TryShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=SOAI_ShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=SOAI_ShootIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SOAI_SelectTargetForStandardShot, Child[2]=SelectAbility-StandardShot)

;;; Actions - sniper attacks (ABA)

+Behaviors=(BehaviorName=SOAI_SniperStandardFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperStandardFire, Child[1]=SOAI_SelectTargetForSniperStandardFire, Child[2]=SelectAbility-SniperStandardFire)
+Behaviors=(BehaviorName=SOAI_SelectTargetForSniperStandardFire, NodeType=Sequence, Child[0]=SetTargetStack-SniperStandardFire, Child[1]=SOAI_SelectBestTarget, Child[2]=HasValidTarget-SniperStandardFire)

;;; Actions - overwatch

+Behaviors=(BehaviorName=SOAI_ConsiderOverwatchIfLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AllShotPercentagesBelow50, Child[2]=TryOverwatch)

;;; Abilities - Suppression

+Behaviors=(BehaviorName=SOAI_TryMoveThenSuppression, NodeType=Selector, Child[0]=SOAI_TryMoveForSuppression, Child[1]=SuppressIfAvailable)
+Behaviors=(BehaviorName=SOAI_TryMoveForSuppression, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-Suppression, Child[2]=SelectTargetForSuppressionByAim, Child[3]=SOAI_MoveIfFirstAbility-Suppression)
+Behaviors=(BehaviorName=SOAI_FindSuppressionDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=SOAI_MaybeSetNoCoverMovement, Child[2]=RestrictToAbilityRange-Suppression, Child[3]=RestrictToEnemyLoS, Child[4]="::SOAI_FindRestrictedDestination")
+Behaviors=(BehaviorName=SOAI_MoveIfFirstAbility-Suppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindSuppressionDestination, Child[3]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=SOAI_ConsiderSuppressionIfLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AllShotPercentagesBelow50, Child[2]=SuppressIfAvailable)

;;; Abilities - Grenades

+Behaviors=(BehaviorName=SOAI_TryMoveThenGrenade, NodeType=Selector, Child[0]=SOAI_TryMoveForGrenade, Child[1]=TryGrenade)
+Behaviors=(BehaviorName=SOAI_TryMoveForGrenade, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-ThrowGrenade, Child[2]=FindPotentialAoETargets-GrenadeProfile, Child[3]=SOAI_MoveIfFirstAbility-Grenade)
+Behaviors=(BehaviorName=SOAI_MoveIfFirstAbility-Grenade, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindGrenadeDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindGrenadeDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-ThrowGrenade, Child[2]=RestrictToEnemyLoS, Child[3]="::SOAI_FindRestrictedDestination")

+Behaviors=(BehaviorName=SOAI_ConsiderGrenadeIfLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AllShotPercentagesBelow50, Child[2]=TryGrenade)

+Behaviors=(BehaviorName=SOAI_TryMoveForFlashbang, NodeType=Sequence, Child[0]=HasItem-FlashbangGrenade, Child[1]=SOAI_TryMoveForGrenade)
+Behaviors=(BehaviorName=SOAI_TryFlashbang, NodeType=Sequence, Child[0]=HasItem-FlashbangGrenade, Child[1]=TryGrenade)

;;; Abilities - Stun lance

+Behaviors=(BehaviorName=SOAI_TryStunLance, NodeType=Sequence, Child[0]=IsAbilityReady-StunLance, Child[1]=SOAI_StunLanceStepSelector)
+Behaviors=(BehaviorName=SOAI_StunLanceStepSelector, NodeType=Selector, Child[0]=SOAI_StunLanceAttack, Child[1]=MoveMeleeIfFirstAbilityFANATIC)
+Behaviors=(BehaviorName=SOAI_StunLanceAttack, NodeType=Sequence, Child[0]=SOAI_SelectTargetForStunLance, Child[1]=SelectAbility-StunLance)

;;; Abilities - Mark target

+Behaviors=(BehaviorName=SOAI_TryMarkTargetOption, NodeType=Sequence, Child[0]=IsAbilityAvailable-MarkTarget, Child[1]=AnyAlliesVisible, Child[2]=MultipleEnemiesVisible, Child[3]=NoUnitsMarked, Child[4]=SOAI_SelectTargetForMarkTarget, Child[5]=SelectAbility-MarkTarget, Intent="Marking a target: GETTIM!")

;;; Abilities - Faceoff (ABA)

+Behaviors=(BehaviorName=SOAI_TryFaceoffIfLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SOAI_TryFaceoff)
+Behaviors=(BehaviorName=SOAI_TryFaceoff, NodeType=Sequence, Child[0]=SOAI_HasAtLeastThreeVisibleEnemies, Child[1]=IsAbilityAvailable-Faceoff, Child[2]=SOAI_SelectTargetForFaceoff, Child[3]=SelectAbility-Faceoff)
+Behaviors=(BehaviorName=SOAI_SelectTargetForFaceoff, NodeType=Sequence, Child[0]=SetTargetStack-Faceoff, Child[1]=SOAI_SelectBestTarget, Child[2]=HasValidTarget-Faceoff)

;;; Abilities - Lightning hands (ABA)

+Behaviors=(BehaviorName=SOAI_TryLightningHands, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightningHands, Child[1]=SOAI_SelectTargetForLightningHands, Child[2]=SelectAbility-LightningHands)
+Behaviors=(BehaviorName=SOAI_SelectTargetForLightningHands, NodeType=Sequence, Child[0]=SetTargetStack-LightningHands, Child[1]=SOAI_SelectBestTarget, Child[2]=HasValidTarget-LightningHands)

;;; Abilities - Call Reinforcements (ABA)
+Behaviors=(BehaviorName=SOAI_TryCallReinforcements, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-ReinforceABA, \\
	Child[1]=MultipleEnemiesVisible, \\
	Child[2]=SOAI_HasNoVisibleAllies, \\
	Child[3]=SelectAbility-ReinforceABA)

;;; Abilities - Mindspin
+Behaviors=(BehaviorName=SOAI_TryMindSpinIfLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=TryMindSpinOption);

;;; Abilities - Tazer
+Behaviors=(BehaviorName=SOAI_TryTazer, NodeType=Sequence, Child[0]=IsAbilityAvailable-FireTazer, Child[1]=SOAI_SelectTargetForTazer, Child[2]=SelectAbility-FireTazer)

;;; Abilities - Fuse protocol
+Behaviors=(BehaviorName=SOAI_TryAdvFuseProtocol, NodeType=Sequence, Child[0]=IsAbilityReady-AdvFuseProtocol, Child[1]=SOAI_SelectTargetForAdvFuseProtocol, Child[2]=SelectAbility-AdvFuseProtocol)

;;; Abilities - Aid Protocol
+Behaviors=(BehaviorName=SOAI_TryAidProtocol, NodeType=Sequence, Child[0]=IsAbilityReady-AidProtocol, Child[1]=SOAI_SelectTargetForAidProtocol, Child[2]=SelectAbility-AidProtocol)

;;; Abilities - Gremlin heal
+Behaviors=(BehaviorName=SOAI_TryGremlinHeal, NodeType=Sequence, Child[0]=IsAbilityReady-GremlinHeal, Child[1]=SOAI_SelectTargetForGremlinHeal, Child[2]=SelectAbility-GremlinHeal)

;;; Target selection

+Behaviors=(BehaviorName=SOAI_TargetScoreAvoidPriorityObject, NodeType=Selector, Child[0]=SOAI_ScoreTargetIfPriorityObject, Child[1]=AddToTargetScore_50)
+Behaviors=(BehaviorName=SOAI_ScoreTargetIfPriorityObject, NodeType=Sequence, Child[0]=TargetIsPriorityObject, Child[1]=AddToTargetScore_0)

+Behaviors=(BehaviorName=SOAI_TargetScoreClosestValidTarget, NodeType=Selector, Child[0]=SOAI_ScoreTargetIfClosestValidTarget, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=SOAI_ScoreTargetIfClosestValidTarget, NodeType=Sequence, Child[0]=TargetIsClosestValidTarget, Child[1]=AddToTargetScore_20)

+Behaviors=(BehaviorName=SOAI_TargetScoreFlankingOnly, NodeType=Selector, Child[0]=SOAI_ScoreTargetIfFlankedOnly, Child[1]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=SOAI_ScoreTargetIfFlankedOnly, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=AddToTargetScore_0) 

+Behaviors=(BehaviorName=SOAI_TargetScoreIfSkulljack, NodeType=Selector, Child[0]=SOAI_ScoreTargetSkulljack, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=SOAI_ScoreTargetSkulljack, NodeType=Sequence, Child[0]=DoesTargetHaveItem-Skulljack, Child[1]=AddToTargetScore_1000) 

+Behaviors=(BehaviorName=SOAI_SelectTargetForStunLance, NodeType=Sequence, Child[0]=SetTargetStack-StunLance, Child[1]=SOAI_SelectBestTargetForStunLance, Child[2]=HasValidTarget-StunLance)
+Behaviors=(BehaviorName=SOAI_SelectBestTargetForStunLance, NodeType=RepeatUntilFail, Child[0]=SOAI_TargetSelectIterationForStunLance)
+Behaviors=(BehaviorName=SOAI_TargetSelectIterationForStunLance, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SOAI_EvaluateTargetForStunLance, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SOAI_EvaluateTargetForStunLance, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth_HighFirst, Child[2]=TargetScoreMarked, Child[3]=AvoidBoundAndPanickedTargets, Child[4]=TargetScoreCivilian, Child[5]=SOAI_TargetScoreAvoidPriorityObject, Child[6]=SOAI_TargetScoreClosestValidTarget)

+Behaviors=(BehaviorName=SOAI_SelectTargetForStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=SOAI_SelectBestTarget, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=SOAI_SelectTargetForTazer, NodeType=Sequence, Child[0]=SetTargetStack-FireTazer, Child[1]=SOAI_SelectBestTarget, Child[2]=HasValidTarget-FireTazer)
+Behaviors=(BehaviorName=SOAI_SelectTargetForAdvFuseProtocol, NodeType=Sequence, Child[0]=SetTargetStack-AdvFuseProtocol, Child[1]=SOAI_SelectBestTarget, Child[2]=HasValidTarget-AdvFuseProtocol)

+Behaviors=(BehaviorName=SOAI_SelectBestTarget, NodeType=RepeatUntilFail, Child[0]=SOAI_GenericEvaluateTarget)
+Behaviors=(BehaviorName=SOAI_GenericEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]="::SOAI_TargetEvaluations", Child[2]=UpdateBestTarget);

+Behaviors=(BehaviorName=SOAI_SelectTargetForMarkTarget, NodeType=Sequence, Child[0]=SetTargetStack-MarkTarget, Child[1]=SOAI_ScoreAllTargets_MarkTarget, Child[2]=HasValidTarget-MarkTarget)
+Behaviors=(BehaviorName=SOAI_ScoreAllTargets_MarkTarget, NodeType=RepeatUntilFail, Child[0]=SOAI_ScoreTarget_MarkTargetLoop)
+Behaviors=(BehaviorName=SOAI_ScoreTarget_MarkTargetLoop, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SOAI_ScoreTarget_MarkTargetScoring, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SOAI_ScoreTarget_MarkTargetScoring, NodeType=Successor, Child[0]=SOAI_ScoreMarkTargetOption)
+Behaviors=(BehaviorName=SOAI_ScoreMarkTargetOption, NodeType=Sequence, Child[0]=TargetIsEnemy, Child[1]=TargetIsNotCivilian, Child[2]=ScoreByHP, Child[3]=TargetScoreHealth_HighFirst, Child[4]=TargetScoreHighestSoldierRank, Child[5]=TargetScoreTeamVisibility, Child[6]=AvoidBoundAndPanickedTargets)

+Behaviors=(BehaviorName=SOAI_SelectTargetForAidProtocol, NodeType=Sequence, Child[0]=SetTargetStack-AidProtocol, Child[1]=SOAI_SelectTargetForAid, Child[2]=HasValidTarget-AidProtocol)
+Behaviors=(BehaviorName=SOAI_SelectTargetForAid, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=SOAI_ScoreBestTargetForAid, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SOAI_ScoreBestTargetForAid, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=SOAI_EvaluateForAid)
+Behaviors=(BehaviorName=SOAI_EvaluateForAid, NodeType=Sequence, Child[0]=ScoreByHP)

+Behaviors=(BehaviorName=SOAI_SelectTargetForGremlinHeal, NodeType=Sequence, Child[0]=SetTargetStack-GremlinHeal, Child[1]=SOAI_SelectTargetForHeal, Child[2]=HasValidTarget-GremlinHeal)
+Behaviors=(BehaviorName=SOAI_SelectTargetForHeal, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=SOAI_ScoreBestTargetForHeal, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SOAI_ScoreBestTargetForHeal, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=SOAI_EvaluateForHeal)
+Behaviors=(BehaviorName=SOAI_EvaluateForHeal, NodeType=Sequence, Child[0]=ScoreByHP)

;;; Special behavior

+Behaviors=(BehaviorName=HasBTVar-SpecialBehavior, NodeType=Condition)
+Behaviors=(BehaviorName=SOAI_SetSpecialBehaviorTrue, NodeType=Action, Param[0]=SetBTVar, Param[1]="SpecialBehavior", Param[2]="1")
+Behaviors=(BehaviorName=SOAI_SetSpecialBehaviorFalse, NodeType=Action, Param[0]=SetBTVar, Param[1]="SpecialBehavior", Param[2]="0")
+Behaviors=(BehaviorName=SOAI_HasSpecialBehavior, NodeType=StatCondition, Param[0]=BTVar, Param[1]="!=", Param[2]="0", Param[3]="SpecialBehavior")
+Behaviors=(BehaviorName=SOAI_InitSpecialBehaviorVar, NodeType=Selector, Child[0]=HasBTVar-SpecialBehavior, Child[1]=SOAI_UpdateSpecialBehaviorVar)
+Behaviors=(BehaviorName=SOAI_UpdateSpecialBehaviorVar, NodeType=Selector, Child[0]=SOAI_TrySetSpecialBehaviorTrue, Child[1]=SOAI_SetSpecialBehaviorFalse)
+Behaviors=(BehaviorName=SOAI_TrySetSpecialBehaviorTrue, NodeType=Sequence, Child[0]="::SOAI_CheckSpecialBehavior", Child[1]=SOAI_SetSpecialBehaviorTrue)

+Behaviors=(BehaviorName=SOAI_IsDoingSpecialBehavior, NodeType=Sequence, Child[0]=SOAI_InitSpecialBehaviorVar, Child[1]=SOAI_HasSpecialBehavior)

+Behaviors=(BehaviorName="::SOAI_CheckSpecialBehavior", NodeType=Failer, Child[0]=DoRedScreenFailure-BTFailure)

; ------------- ADVENT Doctrine -------------

; For reference, the default AI job list in order is:
; Leader, Aggressor, Soldier, Artillery, Support, Flanker, Soldier, Scout*, Soldier, Observer (x6)
; Note that Scout can be filled by a group not in combat
; Some missions have additional out-of-combat jobs: Terrorist, Hunter, Charger, Defender
;
; The movement priorities of the jobs are:
; 5 Support
; 10 Scout, Soldier, Aggressor
; 20 Leader
; 50 Artillery
; 60 Observer, Flanker, misc. out-of-combat jobs
;
;			CaptM1	TroopM1	StunM1	SBearM2	MECM1	Viper	Muton	Sectoid
; Leader	4		8		7		5		3		6		2		1
; Aggressor	8		6		2		3		5		4		1		7
; Soldier	8		6		2		3		5		4		1		7
; Artillery	4		8		7		6		3		2		1		5
; Support	5		8		7		1		4		6		3		2
; Flanker	8		3		1		4		7		5		2		6

; All ADVENT troops use the same behavior trees, but there are some tree nodes that depend on job. Those are:
; - Leader: Uses a different movement weight profile; will use Mark Target if available; will grenade and micro-missile
; - Aggressor: Will do a flanking dash move to break overwatch
; - Soldier: Will suppress if no good shot
; - Artillery: Will move to grenade position, will grenade and micro-missile
; - Support: Will move to suppress position, will suppress aggressively; will use Mark Target if available
; - Flanker: Will do a flanking dash move to break overwatch

; Template-specific stuff

+Behaviors=(BehaviorName=SOAI_IsNoCoverMovementType, NodeType=Selector, Child[0]=TemplateNameIs-AdvMEC_M1, Child[1]=TemplateNameIs-AdvMEC_M2)
+Behaviors=(BehaviorName=SOAI_TrySetNoCoverMovement, NodeType=Sequence, Child[0]=SOAI_IsNoCoverMovementType, Child[1]=SetNoCoverMovement)
+Behaviors=(BehaviorName=SOAI_MaybeSetNoCoverMovement, NodeType=Successor, Child[0]=SOAI_TrySetNoCoverMovement)

; ADVENT movement selection by job
+Behaviors=(BehaviorName=SOAI_FindDestinationByJob-Advent, NodeType=Selector, Child[0]=SOAI_FindDestinationIfLeader-Advent, Child[1]=SOAI_FindDestinationIfLeader-Advent, Child[2]=FindDestination-SOAI_Advent_Generic)
+Behaviors=(BehaviorName=SOAI_FindDestinationIfLeader-Advent, NodeType=Sequence, Child[0]=IsMyPreferredJob-Leader, Child[1]=FindDestination-SOAI_Advent_Leader)
+Behaviors=(BehaviorName=SOAI_FindDestinationIfSniper-Advent, NodeType=Sequence, Child[0]=IsMyPreferredJob-Sniper, Child[1]=FindDestination-SOAI_Advent_Sniper)

+Behaviors=(BehaviorName=SOAI_FindRestrictedDestinationByJob-Advent, NodeType=Selector, Child[0]=SOAI_FindRestrictedDestinationIfLeader-Advent, Child[1]=SOAI_FindRestrictedDestinationIfLeader-Advent, Child[2]=FindRestrictedDestination-SOAI_Advent_Generic)
+Behaviors=(BehaviorName=SOAI_FindRestrictedDestinationIfLeader-Advent, NodeType=Sequence, Child[0]=IsMyPreferredJob-Leader, Child[1]=FindRestrictedDestination-SOAI_Advent_Leader)
+Behaviors=(BehaviorName=SOAI_FindRestrictedDestinationIfSniper-Advent, NodeType=Sequence, Child[0]=IsMyPreferredJob-Sniper, Child[1]=FindRestrictedDestination-SOAI_Advent_Sniper)

; Flanking moves are used by ADVENT with the Aggressor job. The ADVENT versions have relaxed "safe" restrictions to draw overwatch.
+Behaviors=(BehaviorName=SOAI_TryAggressiveFlankingMove, NodeType=Sequence, Child[0]=NoVisibleSuppressors, Child[1]=SOAI_HasNoMoreThanOneOverwatcher, Child[2]=SOAI_TryFlankingMoveUnsafe)
+Behaviors=(BehaviorName=SOAI_TryAggressiveFlankingDashMove, NodeType=Sequence, Child[0]=NoVisibleSuppressors, Child[1]=SOAI_TryFlankingDashMoveUnsafe)

+Behaviors=(BehaviorName=SOAI_TryAggressiveDashMove, NodeType=Sequence, Child[0]=NoVisibleSuppressors, Child[1]=SOAI_DashMoveUnsafe)

; Special SafeToMove behavior with no randomness.
+Behaviors=(BehaviorName=SOAI_SafeToMove-Advent, NodeType=Sequence, Child[0]=NoVisibleSuppressors, Child[1]=NoVisibleOverwatchers)

; These are changed to take all randomness out of the ADVENT AI's decision-making for overwatch. They are, after all, predictable.
+Behaviors=(BehaviorName=SOAI_TryShootOrReloadOrOverwatch-Advent, NodeType=Selector, Child[0]=SOAI_ConsiderTakingOverwatch-Advent, Child[1]=SOAI_ShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=SOAI_ConsiderTakingOverwatch-Advent, NodeType=Selector, Child[0]=SOAI_ConsiderTakingOverwatchAllUnits-Advent)
+Behaviors=(BehaviorName=SOAI_ConsiderTakingOverwatchAllUnits-Advent, NodeType=Sequence, Child[0]=AllShotPercentagesBelow50, Child[1]=NoOverwatchingTeammates, Child[2]=SOAI_HasAtLeastThreeVisibleEnemies, Child[3]=SOAI_HasAtLeastTwoVisibleAllies, Child[4]=TryOverwatch)

; Job-specific behaviors

+Behaviors=(BehaviorName=SOAI_ConsiderAggressiveFlank, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AllShotPercentagesBelow50, Child[2]=SOAI_TryAggressiveFlankingMoveOrDashMove)
+Behaviors=(BehaviorName=SOAI_TryAggressiveFlankingMoveOrDashMove, NodeType=Selector, Child[0]=SOAI_TryAggressiveFlankingMove, Child[1]=SOAI_ConsiderAggressiveFlankingDashMove)
+Behaviors=(BehaviorName=SOAI_ConsiderAggressiveFlankingDashMove, NodeType=Sequence, Child[0]=SOAI_HasAtLeastThreeVisibleAllies, Child[1]=SOAI_TryAggressiveFlankingDashMove)

+Behaviors=(BehaviorName=SOAI_ConsiderAggressiveDash, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AllShotPercentagesBelow50, Child[2]=SOAI_TryAggressiveDashMove)
+Behaviors=(BehaviorName=SOAI_ConsiderAggressiveDashMove, NodeType=Sequence, Child[0]=SOAI_HasAtLeastThreeVisibleAllies, Child[1]=SOAI_TryAggressiveDashMove)

+Behaviors=(BehaviorName=SOAI_TryMicroMissilesMk2, NodeType=Sequence, Child[0]=TemplateNameIs-AdvMEC_M2, Child[1]=TryMicroMissilesMk2)

+Behaviors=(BehaviorName=SOAI_TryMoveForMicroMissiles-Advent, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-MicroMissiles, Child[2]=FindPotentialAoETargets-MicroMissilesProfile, Child[3]=SOAI_MoveAdventIfFirstAbility-MicroMissiles)
+Behaviors=(BehaviorName=SOAI_MoveAdventIfFirstAbility-MicroMissiles, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindMicroMissilesDestination-Advent, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindMicroMissilesDestination-Advent, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=SOAI_MaybeSetNoCoverMovement, Child[2]=RestrictToAbilityRange-MicroMissiles, Child[3]=RestrictToEnemyLoS, Child[4]="::SOAI_FindRestrictedDestination")

; ADVENT Character roots
+Behaviors=(BehaviorName="AdventTrooper::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventTrooper::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventTrooper::SOAI_FindDestination", NodeType=Selector, Child[0]=SOAI_FindDestinationByJob-Advent)
+Behaviors=(BehaviorName="AdventTrooper::SOAI_FindRestrictedDestination", NodeType=Selector, Child[0]=SOAI_FindRestrictedDestinationByJob-Advent)

+Behaviors=(BehaviorName="AdventCaptain::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventCaptain::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventCaptain::SOAI_FindDestination", NodeType=Selector, Child[0]=SOAI_FindDestinationByJob-Advent)`
+Behaviors=(BehaviorName="AdventCaptain::SOAI_FindRestrictedDestination", NodeType=Selector, Child[0]=SOAI_FindRestrictedDestinationByJob-Advent)

+Behaviors=(BehaviorName="AdventStunLancer::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventStunLancer::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventStunLancer::SOAI_FindDestination", NodeType=Selector, Child[0]=SOAI_FindDestinationByJob-Advent)
+Behaviors=(BehaviorName="AdventStunLancer::SOAI_FindRestrictedDestination", NodeType=Selector, Child[0]=SOAI_FindRestrictedDestinationByJob-Advent)

+Behaviors=(BehaviorName="AdventShieldBearer::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventShieldBearer::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventShieldBearer::SOAI_FindDestination", NodeType=Selector, Child[0]=SOAI_FindDestinationByJob-Advent)
+Behaviors=(BehaviorName="AdventShieldBearer::SOAI_FindRestrictedDestination", NodeType=Selector, Child[0]=SOAI_FindRestrictedDestinationByJob-Advent)

+Behaviors=(BehaviorName="AdventMEC::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventMEC::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventMEC::SOAI_FindDestination", NodeType=Sequence, Child[0]=SetNoCoverMovement, Child[1]=FindDestination-SOAI_Advent_MEC)
+Behaviors=(BehaviorName="AdventMEC::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=SetNoCoverMovement, Child[1]=FindRestrictedDestination-SOAI_Advent_MEC)

+Behaviors=(BehaviorName="AdventMECMk2::SOAI_CharacterRoot", NodeType=Selector, Child[0]=SOAI_CharacterRoot-Advent)
+Behaviors=(BehaviorName="AdventMECMk2::SOAI_SafeToMove", NodeType=Selector, Child[0]=SOAI_SafeToMove-Advent)
+Behaviors=(BehaviorName="AdventMECMk2::SOAI_FindDestination", NodeType=Sequence, Child[0]=SetNoCoverMovement, Child[1]=FindDestination-SOAI_Advent_MEC)
+Behaviors=(BehaviorName="AdventMECMk2::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=SetNoCoverMovement, Child[1]=FindRestrictedDestination-SOAI_Advent_MEC)

+Behaviors=(BehaviorName="SOAI_CharacterRoot-Advent", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SOAI_Advent_RedAlert, Child[3]=GenericAlertHandler)

; This covers all the ADVENT unit types (trooper, captain, stun lancer, MEC, and shieldbearer).
; The goal is to give ADVENT units simple, predictable behavior that is still tactically
; effective. There are only two move profiles, one for the current leader and one for other
; units. Other jobs make a difference primarily in action selection.

+Behaviors=(BehaviorName=SOAI_Advent_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SOAI_Advent_RedAbilitySelector)
+Behaviors=(BehaviorName=SOAI_Advent_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SOAI_AdventRedFirstAction, Child[2]=SOAI_AdventRedLastAction)
+Behaviors=(BehaviorName=SOAI_AdventRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_AdventRedFirstActionSelector)
+Behaviors=(BehaviorName=SOAI_AdventRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SOAI_AdventRedLastActionSelector)

+Behaviors=(BehaviorName=SOAI_AdventRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=SOAI_TryAdventSpecialAction, \\
	Child[1]=SOAI_TryAdventJobMove, \\
	Child[2]=SOAI_DoIfFlankedMove, \\
	Child[3]=SOAI_TryAdventJobAction, \\
	Child[4]=NeedsReload, \\
	Child[5]=SOAI_SniperStandardFire, \\
	Child[6]=SOAI_MoveOrTeleport, \\
	Child[7]=SOAI_TryAdventLowPrioritySpecialAction, \\
	Child[8]=SOAI_TryShootOrReloadOrOverwatch-Advent, \\
	Child[9]=SOAI_DashMove, \\
	Child[10]=HuntEnemyWithCover, \\
	Child[11]=TryOverwatch)

+Behaviors=(BehaviorName=SOAI_AdventRedLastActionSelector, NodeType=Selector, \\
	Child[0]=SOAI_TryAdventSpecialAction, \\
	Child[1]=SOAI_TryAdventJobAction, \\
	Child[2]=SOAI_TryAdventLowPrioritySpecialAction, \\
	Child[3]=SOAI_TryShootOrReloadOrOverwatch-Advent, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SOAI_MoveOrTeleport, \\
	Child[6]=TryOverwatch)

+Behaviors=(BehaviorName=SOAI_TryAdventSpecialAction, NodeType=Selector, \\
	Child[0]=SOAI_TryLightningHands, \\
	Child[1]=SOAI_TryStunLance, \\
	Child[2]=SOAI_TryMoveForEnergyShield-Advent, \\
	Child[3]=TryEnergyShieldOnMultipleTargets, \\
	Child[4]=SOAI_TryGremlinHeal)

+Behaviors=(BehaviorName=SOAI_TryAdventLowPrioritySpecialAction, NodeType=Selector, \\
	Child[0]=TryEnergyShieldOnAnyTarget, \\
	Child[1]=SOAI_TryFaceoff, \\
	Child[2]=TryMindSpinOption, \\
	Child[3]=SOAI_TryTazer, \\
	Child[4]=SOAI_TryAdvFuseProtocol, \\
	Child[5]=SOAI_TryAidProtocol)

+Behaviors=(BehaviorName=SOAI_TryAdventJobMove, NodeType=Selector, \\
	Child[0]=SOAI_MaybeTryAdventAggressorMove, \\
	Child[1]=SOAI_MaybeTryAdventArtilleryMove, \\
	Child[2]=SOAI_MaybeTryAdventSupportMove, \\
	Child[3]=SOAI_MaybeTryAdventFlankerMove)

+Behaviors=(BehaviorName=SOAI_MaybeTryAdventAggressorMove, NodeType=Sequence, Child[0]=IsMyPreferredJob-Aggressor, Child[1]=SOAI_TryAdventAggressorMove)
+Behaviors=(BehaviorName=SOAI_MaybeTryAdventArtilleryMove, NodeType=Sequence, Child[0]=IsMyPreferredJob-Artillery, Child[1]=SOAI_TryAdventArtilleryMove)
+Behaviors=(BehaviorName=SOAI_MaybeTryAdventSupportMove, NodeType=Sequence, Child[0]=IsMyPreferredJob-Support, Child[1]=SOAI_TryAdventSupportMove)
+Behaviors=(BehaviorName=SOAI_MaybeTryAdventFlankerMove, NodeType=Sequence, Child[0]=IsMyPreferredJob-Flanker, Child[1]=SOAI_TryAdventFlankerMove)

+Behaviors=(BehaviorName=SOAI_TryAdventAggressorMove, NodeType=Selector, \\
	Child[0]=SOAI_ConsiderAggressiveDash)

+Behaviors=(BehaviorName=SOAI_TryAdventArtilleryMove, NodeType=Selector, \\
	Child[0]=SOAI_TryMoveForGrenade, \\
	Child[1]=SOAI_TryMoveForMicroMissiles-Advent)

+Behaviors=(BehaviorName=SOAI_TryAdventSupportMove, NodeType=Selector, \\
	Child[0]=SOAI_TryMoveForFlashbang, \\
	Child[1]=SOAI_TryMoveForSuppression)

+Behaviors=(BehaviorName=SOAI_TryAdventFlankerMove, NodeType=Selector, \\
	Child[0]=SOAI_ConsiderAggressiveFlank)

+Behaviors=(BehaviorName=SOAI_TryAdventJobAction, NodeType=Selector, \\
	Child[0]=SOAI_MaybeTryAdventLeaderAction, \\
	Child[1]=SOAI_MaybeTryAdventSoldierAction, \\
	Child[2]=SOAI_MaybeTryAdventArtilleryAction, \\
	Child[3]=SOAI_MaybeTryAdventSupportAction)

+Behaviors=(BehaviorName=SOAI_MaybeTryAdventLeaderAction, NodeType=Sequence, Child[0]=IsMyPreferredJob-Leader, Child[1]=SOAI_TryAdventLeaderAction)
+Behaviors=(BehaviorName=SOAI_MaybeTryAdventSoldierAction, NodeType=Sequence, Child[0]=IsMyPreferredJob-Soldier, Child[1]=SOAI_TryAdventSoldierAction)
+Behaviors=(BehaviorName=SOAI_MaybeTryAdventArtilleryAction, NodeType=Sequence, Child[0]=IsMyPreferredJob-Artillery, Child[1]=SOAI_TryAdventArtilleryAction)
+Behaviors=(BehaviorName=SOAI_MaybeTryAdventSupportAction, NodeType=Sequence, Child[0]=IsMyPreferredJob-Support, Child[1]=SOAI_TryAdventSupportAction)

+Behaviors=(BehaviorName=SOAI_TryAdventLeaderAction, NodeType=Selector, \\
	Child[0]=SOAI_TryCallReinforcements, \\
	Child[1]=SOAI_TryMarkTargetOption, \\
	Child[2]=TryGrenade, \\
	Child[3]=TryMicroMissiles, \\
	Child[4]=SOAI_TryMicroMissilesMk2)

; SuppressIfAvailable will always try to suppress, while ConsiderSuppression only suppresses if there are no good shot targets (hit >= 50)
+Behaviors=(BehaviorName=SOAI_TryAdventSoldierAction, NodeType=Selector, \\
	Child[0]=SOAI_ConsiderGrenadeIfLastAction, \\
	Child[1]=SOAI_ConsiderSuppressionIfLastAction)

+Behaviors=(BehaviorName=SOAI_TryAdventArtilleryAction, NodeType=Selector, \\
	Child[0]=TryGrenade, \\
	Child[1]=TryMicroMissiles, \\
	Child[2]=SOAI_TryMicroMissilesMk2, \\
	Child[3]=SOAI_TryAggressiveGrenade)

+Behaviors=(BehaviorName=SOAI_TryAdventSupportAction, NodeType=Selector, \\
	Child[0]=SOAI_TryFlashbang, \\
	Child[1]=SuppressIfAvailable, \\
	Child[2]=SOAI_ConsiderOverwatchIfLastAction)

+Behaviors=(BehaviorName=SOAI_TryAggressiveGrenade, NodeType=Sequence, \\
	Child[0]=IsLastActionPoint, \\
	Child[1]=AllShotPercentagesBelow50, \\
	Child[2]=IsAbilityAvailable-ThrowGrenade, \\
	Child[3]=FindPotentialAoETargets-GrenadeSingleProfile, \\
	Child[4]=SelectAoETarget-GrenadeSingleProfile, \\
	Child[5]=SelectAbility-ThrowGrenade)

+Behaviors=(BehaviorName=SOAI_MoveAdventIfFirstAbility-EnergyShield, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindShieldDestinationAdvent, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_TryMoveForEnergyShield-Advent, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-EnergyShield, Child[2]=NotLastActionPoint, Child[3]=SOAI_MoveAdventIfFirstAbility-EnergyShield)

+Behaviors=(BehaviorName=SOAI_FindShieldDestinationAdvent, NodeType=Selector, Child[0]=SOAI_FindShieldDestinationAdvent_MultipleUnits, Child[1]=SOAI_FindShieldDestinationAdvent_BestUnit)
+Behaviors=(BehaviorName=SOAI_FindShieldDestinationAdvent_MultipleUnits, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=SOAI_MaybeSetNoCoverMovement, Child[2]=RestrictToAlliedAbilityRange-EnergyShield, Child[3]=AddAbilityRangeWeight-EnergyShield, Child[4]="::SOAI_FindRestrictedDestination")
+Behaviors=(BehaviorName=SOAI_FindShieldDestinationAdvent_BestUnit, NodeType=Sequence, Child[0]=SelectPotentialTargetForEnergyShield, Child[1]=ResetDestinationSearch, Child[2]=SOAI_MaybeSetNoCoverMovement, Child[3]=RestrictToPotentialTargetRange-EnergyShield, Child[4]="::SOAI_FindRestrictedDestination")

+Behaviors=(BehaviorName=SOAI_TryEnergyShieldOnAnyTargetIfLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=TryEnergyShieldOnAnyTarget)

; -------------------- Sectoid AI BEHAVIOR TREE NODES BEGIN -------------------

+Behaviors=(BehaviorName="Sectoid::SOAI_CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SOAI_SectoidRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="Sectoid::SOAI_SafeToMove", NodeType=Sequence, Child[0]=SOAI_SafeToMove-Sectoid)
+Behaviors=(BehaviorName="Sectoid::SOAI_FindDestination", NodeType=Sequence, Child[0]=FindDestination-SOAI_Sectoid)
+Behaviors=(BehaviorName="Sectoid::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=FindRestrictedDestination-SOAI_Sectoid)

+Behaviors=(BehaviorName=SOAI_SectoidRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SOAI_SectoidRedAbilitySelector)
+Behaviors=(BehaviorName=SOAI_SectoidRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SOAI_SectoidRedFirstAction, Child[2]=SOAI_SectoidRedLastAction)
+Behaviors=(BehaviorName=SOAI_SectoidRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_SectoidRedFirstActionSelector)
+Behaviors=(BehaviorName=SOAI_SectoidRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SOAI_SectoidRedLastActionSelector)

; Sectoids are fundamentally cowardly, which they manifest by skulking around the outside of the
; battle trying to only engage one or two enemies at a time. When confronted by multiple enemies,
; they tend to either flee or fire their plasma pistols wildly. When not panicking they prefer
; to use their psi abilities, usually moving to avoid being seen by enemies other than their target.

+Behaviors=(BehaviorName=SOAI_SectoidRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=SOAI_DoIfFlankedMove-Sectoid, \\
	Child[1]=SOAI_TrySectoidPanic, \\
	Child[2]=SOAI_TryMoveThenPsiReanimationOrMindSpin, \\
	Child[3]=SOAI_MoveOrTeleport, \\
	Child[4]=TryPsiReanimationOrMindSpinOption, \\
	Child[5]=SOAI_TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SOAI_SectoidRedLastActionSelector, NodeType=Selector, \\
	Child[0]=SOAI_DoIfFlankedMove-Sectoid, \\
	Child[1]=SOAI_TrySectoidPanic, \\
	Child[2]=TryPsiReanimationOrMindSpinOption, \\
	Child[3]=SOAI_TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SOAI_MoveOrTeleport)

+Behaviors=(BehaviorName=SOAI_TryMoveThenPsiReanimationOrMindSpin, NodeType=RandSelector, Child[0]=SOAI_TryMoveThenPsiReanimation, Param[0]=66, Child[1]=SOAI_TryMoveThenMindSpin, Param[1]=34)

; Sectoid hiding - these use the standard Sectoid move profile, but restrict to tiles outside of enemy LOS.
+Behaviors=(BehaviorName=SOAI_FindDestinationOutOfEnemyLoS, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictFromKnownEnemyLoS, Child[2]="::SOAI_FindRestrictedDestination")
+Behaviors=(BehaviorName=SOAI_MoveOutOfEnemyLoS, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_MoveUnsafeOutOfEnemyLoS)
+Behaviors=(BehaviorName=SOAI_MoveUnsafeOutOfEnemyLoS, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=SOAI_FindDestinationOutOfEnemyLoS, Child[2]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=SOAI_FindDashDestinationOutOfEnemyLoS, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictFromKnownEnemyLoS, Child[2]=UseDashMovement, Child[3]="::SOAI_FindRestrictedDestination")
+Behaviors=(BehaviorName=SOAI_DashMoveOutOfEnemyLoS, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_DashMoveUnsafeOutOfEnemyLoS)
+Behaviors=(BehaviorName=SOAI_DashMoveUnsafeOutOfEnemyLoS, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=SOAI_FindDashDestinationOutOfEnemyLoS, Child[2]=SelectAbility-StandardMove)

; Sectoids are cowardly and won't move if there are any suppressors or overwatchers.
+Behaviors=(BehaviorName=SOAI_SafeToMove-Sectoid, NodeType=Sequence, Child[0]=NoVisibleSuppressors, Child[1]=NoVisibleOverwatchers)

; Special Sectoid "panic" behavior. A Sectoid in a scary situation has a 50% chance to try to flee to somewhere it can't
; be seen by enemies, and a 50% chance to shoot a random enemy.
+Behaviors=(BehaviorName=SOAI_TrySectoidPanic, NodeType=Sequence, Child[0]=SOAI_IsSectoidScared, Child[1]=PlayAnimation-HL_CallReinforcementsA, Child[2]=SOAI_SectoidPanic)
+Behaviors=(BehaviorName=SOAI_IsSectoidScared, NodeType=Selector, Child[0]=SOAI_HasSuppressor, Child[1]=SOAI_IsDoingSpecialBehavior)
+Behaviors=(BehaviorName=SOAI_SectoidPanic, NodeType=RandSelector, Child[0]=SOAI_SectoidPanicMove, Param[0]=50, Child[1]=SOAI_SectoidPanicFire, Param[1]=50)
+Behaviors=(BehaviorName=SOAI_SectoidPanicMove, NodeType=Selector, Child[0]=SOAI_MoveOutOfEnemyLoS, Child[1]=SOAI_DashMoveUnsafeOutOfEnemyLoS)
+Behaviors=(BehaviorName=SOAI_SectoidPanicFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SOAI_SelectTargetForStandardShot-SectoidPanic, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SOAI_SelectTargetForStandardShot-SectoidPanic, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=GenericSelectTargetSomewhatRandomly, Child[2]=HasValidTarget-StandardShot)

; A sectoid has a chance to panic if it sees at least two enemies. There is a 20% chance per enemy that the sectoid will
; panic. This works out to the following panic chances:
; Enemies	Chance
; 2			36.0%
; 3			48.8%
; 4			59.0%
; 5			67.2%
; 6			73.8%
+Behaviors=(BehaviorName="Sectoid::SOAI_CheckSpecialBehavior", NodeType=Sequence, Child[0]=SOAI_HasAtLeastTwoVisibleEnemies, Child[1]=SetVisiblePotentialTargetStack, Child[2]=SOAI_RepeatSectoidPanicRoll, Child[3]=SOAI_PanicRollFailed)
+Behaviors=(BehaviorName=SOAI_RepeatSectoidPanicRoll, NodeType=RepeatUntilFail, Child[0]=SOAI_IterateSectoidPanicRoll)
+Behaviors=(BehaviorName=SOAI_IterateSectoidPanicRoll, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SOAI_Roll80ToNotPanic, Child[2]=SOAI_PanicRollPassed)
+Behaviors=(BehaviorName=SOAI_Roll80ToNotPanic, NodeType=RandSelector, Child[0]=SOAI_SetPanicFalse, Param[0]=80, Child[1]=SOAI_SetPanicTrue, Param[1]=20)
+Behaviors=(BehaviorName=SOAI_SetPanicTrue, NodeType=Action, Param[0]=SetBTVar, Param[1]="Panic", Param[2]="1")
+Behaviors=(BehaviorName=SOAI_SetPanicFalse, NodeType=Action, Param[0]=SetBTVar, Param[1]="Panic", Param[2]="0")
+Behaviors=(BehaviorName=SOAI_PanicRollFailed, NodeType=StatCondition, Param[0]=BTVar, Param[1]="!=", Param[2]="0", Param[3]="Panic")
+Behaviors=(BehaviorName=SOAI_PanicRollPassed, NodeType=StatCondition, Param[0]=BTVar, Param[1]="==", Param[2]="0", Param[3]="Panic")

; Psi Reanimation behaviors
+Behaviors=(BehaviorName=IsAbilityReady-PsiReanimation, NodeType=Condition)
+Behaviors=(BehaviorName=RestrictToAbilityRange-PsiReanimation, NodeType=Action)

+Behaviors=(BehaviorName=SOAI_TryMoveThenPsiReanimation, NodeType=Selector, Child[0]=SOAI_TryMoveForPsiReanimation, Child[1]=TryPsiReanimation)
+Behaviors=(BehaviorName=SOAI_TryMoveForPsiReanimation, NodeType=Sequence, Child[0]="Sectoid::SOAI_SafeToMove", Child[1]=IsAbilityReady-PsiReanimation, Child[2]=SelectTargetForPsiReanimation, Child[3]=SOAI_MoveSectoidIfFirstAbility-PsiReanimation)
+Behaviors=(BehaviorName=SOAI_MoveSectoidIfFirstAbility-PsiReanimation, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindPsiReanimationDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindPsiReanimationDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-PsiReanimation, Child[2]="::SOAI_FindRestrictedDestination")

; Mind Spin behaviors
+Behaviors=(BehaviorName=IsAbilityReady-MindSpin, NodeType=Condition)
+Behaviors=(BehaviorName=RestrictToAbilityRange-MindSpin, NodeType=Action)

+Behaviors=(BehaviorName=SOAI_TryMoveThenMindSpin, NodeType=Selector, Child[0]=SOAI_TryMoveForMindSpin, Child[1]=TryMindSpinOption)
+Behaviors=(BehaviorName=SOAI_TryMoveForMindSpin, NodeType=Sequence, Child[0]="Sectoid::SOAI_SafeToMove", Child[1]=IsAbilityReady-MindSpin, Child[2]=SelectTargetForMindSpin, Child[3]=SOAI_MoveSectoidIfFirstAbility-MindSpin)
+Behaviors=(BehaviorName=SOAI_MoveSectoidIfFirstAbility-MindSpin, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindMindSpinDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindMindSpinDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-MindSpin, Child[2]=RestrictToEnemyLOS, Child[3]="::SOAI_FindRestrictedDestination")

; Special Sectoid flanked move behaviors - try to move out of enemy LOS entirely when flanked.
+Behaviors=(BehaviorName=SOAI_DoIfFlankedMove-Sectoid, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=SOAI_FlankedMove-Sectoid)
+Behaviors=(BehaviorName=SOAI_FlankedMove-Sectoid, NodeType=Selector, Child[0]=SOAI_MoveUnsafeOutOfEnemyLoS, Child[1]=SOAI_MoveUnsafe)

; -------------------- Viper --------------------------------------------------

+Behaviors=(BehaviorName="Viper::SOAI_CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SOAI_ViperRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="Viper::SOAI_FindDestination", NodeType=Sequence, Child[0]=SOAI_FindViperDestination)
+Behaviors=(BehaviorName="Viper::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=SOAI_FindViperRestrictedDestination)
+Behaviors=(BehaviorName="Viper::SOAI_TargetEvaluations", NodeType=Sequence, Child[0]=SOAI_ViperTargetEvaluations)

+Behaviors=(BehaviorName=SOAI_ViperRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SOAI_ViperRedAbilitySelector)
+Behaviors=(BehaviorName=SOAI_ViperRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SOAI_ViperRedFirstAction, Child[2]=SOAI_ViperRedLastAction)
+Behaviors=(BehaviorName=SOAI_ViperRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_ViperRedFirstActionSelector)
+Behaviors=(BehaviorName=SOAI_ViperRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SOAI_ViperRedLastActionSelector)

; Vipers are predatory. They prefer to isolate single targets and crush them. If threatened up close, they tend to use
; their poison spit to disable the enemy. They like high places and happily use their plasma guns if they have a 
; good shot. Vipers are naturally solitary and tend to ignore the rest of the alien group to do their own thing.

+Behaviors=(BehaviorName=SOAI_ViperRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=StandardMeleeAttack, \\
	Child[1]=SOAI_TryGetOverHereFlankingOnly, \\
	Child[2]=SOAI_MaybeTryViperThreatenedAction, \\
	Child[3]=SOAI_TryViperPriority1Action, \\
	Child[4]=SOAI_TryViperPriority2Action, \\
	Child[5]=SOAI_MoveOrTeleport, \\
	Child[6]=SOAI_TryViperPriority3Action, \\
	Child[7]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SOAI_ViperRedLastActionSelector, NodeType=Selector, \\
    Child[0]=StandardMeleeAttack, \\
	Child[1]=SOAI_TryGetOverHereFlankingOnly, \\
	Child[2]=SOAI_TryViperMoveIfThreatened, \\
	Child[3]=SOAI_TryViperPriority1Action, \\
	Child[4]=SOAI_TryViperPriority2Action, \\
	Child[5]=SOAI_TryViperPriority3Action, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=SOAI_MoveOrTeleport)

+Behaviors=(BehaviorName=SOAI_MaybeTryViperThreatenedAction, NodeType=Sequence, \\
	Child[0]=SOAI_IsDoingSpecialBehavior, \\
	Child[1]=PlayAnimation-HL_SignalNegativeA, \\
	Child[2]=SOAI_SelectViperThreatenedAction)

+Behaviors=(BehaviorName=SOAI_SelectViperThreatenedAction, NodeType=RandSelector, \\
	Child[0]=SOAI_DoIfFlankedMove,							Param[0]=25, \\
	Child[1]=TryPoisonSpitSingle,							Param[1]=75)

+Behaviors=(BehaviorName=SOAI_TryViperMoveIfThreatened, NodeType=Sequence, \\
	Child[0]=SOAI_IsDoingSpecialBehavior, \\
	Child[1]=SOAI_DoIfFlankedMove)

+Behaviors=(BehaviorName=SOAI_TryViperPriority1Action, NodeType=RandSelector, \\
	Child[0]=SOAI_TryMoveThenGetOverHere,					Param[0]=50, \\
	Child[1]=SOAI_TryFlankingMoveIfFirstAbility,			Param[1]=25, \\
	Child[2]=TryStandardMelee,								Param[2]=25)

+Behaviors=(BehaviorName=SOAI_TryViperPriority2Action, NodeType=RandSelector, \\
	Child[0]=SOAI_TryMoveThenPoisonSpit,					Param[0]=25, \\
	Child[1]=SOAI_TryFlankingDashMoveIfFirstAbility,		Param[1]=50, \\
	Child[2]=NeedsReload,									Param[2]=25)

+Behaviors=(BehaviorName=SOAI_TryViperPriority3Action, NodeType=RandSelector, \\
	Child[0]=TryPoisonSpitSingle,							Param[0]=25, \\
	Child[1]=SOAI_TryShootOrReloadOrOverwatch,				Param[1]=50, \\
	Child[2]=SOAI_TryGetOverHere,							Param[2]=25)

+Behaviors=(BehaviorName=SOAI_ViperTargetEvaluations, NodeType=Sequence, \\
	Child[0]=TargetScoreHitChance, \\
	Child[1]=TargetScoreHealth, \\
	Child[2]=TargetScoreFlanking, \\
	Child[3]=TargetScoreMarked, \\
	Child[4]=ApplyDifficultyModifiers, \\
	Child[5]=TargetScoreCivilian, \\
	Child[6]=SOAI_TargetScoreClosestValidTarget, \\
	Child[7]=AvoidBoundAndPanickedTargets)


; Use Viper movement profile for abilities

+Behaviors=(BehaviorName=SOAI_FindViperDestination, NodeType=Selector, Child[0]=SOAI_MaybeFindDestination-SOAI_Viper_Defensive, Child[1]=FindDestination-SOAI_Viper)
+Behaviors=(BehaviorName=SOAI_MaybeFindDestination-SOAI_Viper_Defensive, NodeType=Sequence, Child[0]=SOAI_IsDoingSpecialBehavior, Child[1]=FindDestination-SOAI_Viper_Defensive)
+Behaviors=(BehaviorName=SOAI_FindViperRestrictedDestination, NodeType=Selector, Child[0]=SOAI_MaybeFindRestrictedDestination-Viper_Defensive, Child[1]=FindRestrictedDestination-SOAI_Viper)
+Behaviors=(BehaviorName=SOAI_MaybeFindRestrictedDestination-Viper_Defensive, NodeType=Sequence, Child[0]=SOAI_IsDoingSpecialBehavior, Child[1]=FindRestrictedDestination-SOAI_Viper_Defensive)

+Behaviors=(BehaviorName=SOAI_TryMoveThenPoisonSpit, NodeType=Selector, Child[0]=SOAI_TryMoveForPoisonSpit, Child[1]=TryPoisonSpit)
+Behaviors=(BehaviorName=SOAI_TryMoveForPoisonSpit, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-PoisonSpit, Child[2]=FindPotentialAoETargets-PoisonSpitProfile, Child[3]=SOAI_MoveStandardIfFirstAbility-PoisonSpit)

+Behaviors=(BehaviorName=SOAI_TryMoveThenPoisonSpitSingle, NodeType=Selector, Child[0]=SOAI_TryMoveForPoisonSpitSingle, Child[1]=TryPoisonSpitSingle)
+Behaviors=(BehaviorName=SOAI_TryMoveForPoisonSpitSingle, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-PoisonSpit, Child[2]=FindPotentialAoETargets-PoisonSpitSingleProfile, Child[3]=SOAI_MoveStandardIfFirstAbility-PoisonSpit)

+Behaviors=(BehaviorName=SOAI_MoveStandardIfFirstAbility-PoisonSpit, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindPoisonSpitDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindPoisonSpitDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-PoisonSpit, Child[2]=RestrictToEnemyLoS, Child[3]="::SOAI_FindRestrictedDestination")

; Tongue pull behaviors
+Behaviors=(BehaviorName=IsAbilityReady-GetOverHere, NodeType=Condition)
+Behaviors=(BehaviorName=RestrictToAbilityRange-GetOverHere, NodeType=Action)

+Behaviors=(BehaviorName=SOAI_TryMoveThenGetOverHere, NodeType=Selector, Child[0]=SOAI_TryMoveForGetOverHere, Child[1]=SOAI_TryGetOverHereFlankingOnly)
+Behaviors=(BehaviorName=SOAI_TryMoveForGetOverHere, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=IsAbilityReady-GetOverHere, Child[2]=SelectTargetForGetOverHere, Child[3]=SOAI_MoveViperIfFirstAbility-GetOverHere)
+Behaviors=(BehaviorName=SOAI_MoveViperIfFirstAbility-GetOverHere, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindGetOverHereDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindGetOverHereDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-GetOverHere, Child[2]=RestrictToFlanking, Child[3]=RestrictToEnemyLOS, Child[4]=FindRestrictedDestination-SOAI_Viper_Pull)

+Behaviors=(BehaviorName=SOAI_TryGetOverHere, NodeType=Sequence, Child[0]=IsAbilityAvailable-GetOverHere, Child[1]=HasBindableNeighborTile, Child[2]=SOAI_SelectTargetForGetOverHere, Child[3]=SelectAbility-GetOverHere)

+Behaviors=(BehaviorName=SOAI_SelectTargetForGetOverHere, NodeType=Sequence, Child[0]=SetTargetStack-GetOverHere, Child[1]=SOAI_SelectBestTargetForGetOverHere, Child[2]=HasValidTarget-GetOverHere)
+Behaviors=(BehaviorName=SOAI_SelectBestTargetForGetOverHere, NodeType=RepeatUntilFail, Child[0]=SOAI_TargetSelectIterationForGetOverHere)
+Behaviors=(BehaviorName=SOAI_TargetSelectIterationForGetOverHere, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]="::SOAI_TargetEvaluations", Child[2]=TargetScoreInvalidateCivilians, Child[3]=SSTargetScoreInvalidTonguePullTargets, Child[4]=UpdateBestTarget)

+Behaviors=(BehaviorName=SOAI_TryGetOverHereFlankingOnly, NodeType=Sequence, Child[0]=IsAbilityAvailable-GetOverHere, Child[1]=SOAI_SelectTargetForGetOverHereFlankingOnly, Child[2]=SelectAbility-GetOverHere)

+Behaviors=(BehaviorName=SOAI_SelectTargetForGetOverHereFlankingOnly, NodeType=Sequence, Child[0]=SetTargetStack-GetOverHere, Child[1]=SOAI_SelectBestTargetForGetOverHereFlankingOnly, Child[2]=HasValidTarget-GetOverHere)
+Behaviors=(BehaviorName=SOAI_SelectBestTargetForGetOverHereFlankingOnly, NodeType=RepeatUntilFail, Child[0]=SOAI_TargetSelectIterationForGetOverHereFlankingOnly)
+Behaviors=(BehaviorName=SOAI_TargetSelectIterationForGetOverHereFlankingOnly, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]="::SOAI_TargetEvaluations", Child[2]=TargetScoreInvalidateCivilians, Child[3]=SSTargetScoreInvalidTonguePullTargets, Child[4]=SOAI_TargetScoreFlankingOnly, Child[5]=UpdateBestTarget)

; Viper threatened

+Behaviors=(BehaviorName="Viper::SOAI_CheckSpecialBehavior", NodeType=Selector, Child[0]=CheckIfNeedToMove, Child[1]=SOAI_CheckPoisonSpitAtavism)
+Behaviors=(BehaviorName=SOAI_CheckPoisonSpitAtavism, NodeType=Sequence, Child[0]=HasWounds, Child[1]=IsAbilityAvailable-PoisonSpit, Child[2]=FindPotentialAoETargets-PoisonSpitProfile, Child[3]=SelectAoETarget-PoisonSpitProfile)

; -------------------- Muton --------------------------------------------------

+Behaviors=(BehaviorName="Muton::SOAI_CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SOAI_MutonRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="Muton::SOAI_FindDestination", NodeType=Sequence, Child[0]=FindDestination-SOAI_Muton)
+Behaviors=(BehaviorName="Muton::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=FindRestrictedDestination-SOAI_Muton)

+Behaviors=(BehaviorName=SOAI_MutonRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SOAI_MutonRedAbilitySelector)
+Behaviors=(BehaviorName=SOAI_MutonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SOAI_MutonRedFirstAction, Child[2]=SOAI_MutonRedLastAction)
+Behaviors=(BehaviorName=SOAI_MutonRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_MutonRedFirstActionSelector)
+Behaviors=(BehaviorName=SOAI_MutonRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SOAI_MutonRedLastActionSelector)

; Mutons are disciplined and tactical, but somewhat unpredictable.

; General pattern:
; If one muton, the Leader makes ranged attacks.
; If two mutons, the Leader makes ranged attacks while the Aggressor closes to melee.
; If three mutons, the Leader makes ranged attacks, the Aggressor closes to melee, and the Soldier suppresses.
+Behaviors=(BehaviorName=SOAI_MutonRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=SOAI_BayonetAttack, \\
	Child[1]=SOAI_TryMutonBloodlustBehavior, \\
	Child[2]=SOAI_DoIfFlankedMove, \\
	Child[3]=SOAI_TryMutonJobBehavior, \\
	Child[4]=NeedsReload, \\
	Child[5]=SOAI_TryMutonGenericBehavior, \\
	Child[6]=SOAI_MoveOrTeleport, \\
	Child[7]=SOAI_TryShootOrReloadOrOverwatch, \\
	Child[8]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SOAI_MutonRedLastActionSelector, NodeType=Selector, \\
	Child[0]=SOAI_BayonetAttack, \\
	Child[1]=SOAI_TryMutonBloodlustBehavior, \\
	Child[2]=SOAI_TryMutonJobBehavior, \\
	Child[3]=SOAI_TryMutonGenericBehavior, \\
	Child[4]=SOAI_TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SOAI_MoveOrTeleport) 

+Behaviors=(BehaviorName=SOAI_TryMutonBloodlustBehavior, NodeType=Sequence, Child[0]=SOAI_IsDoingSpecialBehavior, Child[1]=PlayAnimation-HL_SignalPositiveA, Child[2]=SOAI_MutonBloodlustBehavior)
+Behaviors=(BehaviorName=SOAI_MutonBloodlustBehavior, NodeType=Selector, Child[0]=SOAI_TryBayonetOrHuntWounded, Child[1]=SOAI_DashMoveUnsafe-MutonMelee)
+Behaviors=(BehaviorName=SOAI_TryBayonetOrHuntWounded, NodeType=RandSelector, \\
	Child[0]=SOAI_TryBayonet,					Param[0]=50, \\
	Child[1]=SOAI_TryHuntWoundedTarget,			Param[1]=50)

+Behaviors=(BehaviorName=SOAI_TryMutonJobBehavior, NodeType=Selector, \\
	Child[0]=SOAI_MaybeTryMutonLeaderBehavior, \\
	Child[1]=SOAI_MaybeTryMutonAggressorBehavior, \\
	Child[2]=SOAI_MaybeTryMutonSoldierBehavior, \\
	Child[3]=SOAI_MaybeTryMutonArtilleryBehavior, \\
	Child[4]=SOAI_MaybeTryMutonSupportBehavior)

+Behaviors=(BehaviorName=SOAI_MaybeTryMutonLeaderBehavior, NodeType=Sequence, Child[0]=IsMyPreferredJob-Leader, Child[1]=SOAI_TryMutonLeaderBehavior)
+Behaviors=(BehaviorName=SOAI_MaybeTryMutonAggressorBehavior, NodeType=Sequence, Child[0]=IsMyPreferredJob-Aggressor, Child[1]=SOAI_TryMutonAggressorBehavior)
+Behaviors=(BehaviorName=SOAI_MaybeTryMutonSoldierBehavior, NodeType=Sequence, Child[0]=IsMyPreferredJob-Soldier, Child[1]=SOAI_TryMutonSoldierBehavior)
+Behaviors=(BehaviorName=SOAI_MaybeTryMutonArtilleryBehavior, NodeType=Sequence, Child[0]=IsMyPreferredJob-Artillery, Child[1]=SOAI_TryMutonArtilleryBehavior)
+Behaviors=(BehaviorName=SOAI_MaybeTryMutonSupportBehavior, NodeType=Sequence, Child[0]=IsMyPreferredJob-Support, Child[1]=SOAI_TryMutonSupportBehavior)

+Behaviors=(BehaviorName=SOAI_TryMutonLeaderBehavior, NodeType=Selector, \\
	Child[0]=SOAI_TryFlankThenShoot, \\
	Child[1]=SOAI_TryMoveThenGrenade)

+Behaviors=(BehaviorName=SOAI_TryMutonAggressorBehavior, NodeType=Selector, \\
	Child[0]=SOAI_TryBayonet)

+Behaviors=(BehaviorName=SOAI_TryMutonSoldierBehavior, NodeType=Selector, \\
	Child[0]=SOAI_TryFlankThenShoot, \\
	Child[1]=SOAI_TryMoveThenSuppression, \\
	Child[2]=SOAI_Reload50)

+Behaviors=(BehaviorName=SOAI_TryMutonArtilleryBehavior, NodeType=Selector, \\
	Child[0]=SOAI_TryMoveThenGrenade)

+Behaviors=(BehaviorName=SOAI_TryMutonSupportBehavior, NodeType=Selector, \\
	Child[0]=SOAI_TryMoveThenGrenade, \\
	Child[1]=SOAI_TryMoveThenSuppression)

+Behaviors=(BehaviorName=SOAI_TryMutonGenericBehavior, NodeType=RandSelector, \\
	Child[0]=SOAI_TryBayonet,				Param[0]=50, \\
	Child[1]=SOAI_TryMoveThenGrenade,		Param[1]=25, \\
	Child[2]=SOAI_TryFlankThenShoot,		Param[2]=25)

+Behaviors=(BehaviorName=SOAI_Reload, NodeType=Sequence, Child[0]=IsAbilityAvailable-Reload, Child[1]=SelectAbility-Reload)
+Behaviors=(BehaviorName=SOAI_Reload50, NodeType=RandFilter, Child[0]=SOAI_Reload, Param[0]=50)

+Behaviors=(BehaviorName=SOAI_TryHuntWoundedTarget, NodeType=Selector, Child[0]=SOAI_TryMoveForHuntWounded-Muton, Child[1]=SOAI_ShootWoundedTarget)
+Behaviors=(BehaviorName=SOAI_TryMoveForHuntWounded-Muton, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]="::SOAI_SafeToMove", Child[2]=IsAbilityAvailable-StandardShot, Child[3]=SetVisiblePotentialTargetStack, Child[4]=SOAI_SelectTarget_HuntWounded, Child[5]=SOAI_MoveStandardIfFirstAbility-StandardShot)
+Behaviors=(BehaviorName=SOAI_ShootWoundedTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SetTargetStack-StandardShot, Child[2]=SOAI_SelectTarget_HuntWounded, Child[3]=HasValidTarget-StandardShot, Child[4]=SelectAbility-StandardShot) 
+Behaviors=(BehaviorName=SOAI_FindStandardShotDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-StandardShot, Child[2]=RestrictToEnemyLoS, Child[3]="::SOAI_FindRestrictedDestination")
+Behaviors=(BehaviorName=SOAI_MoveStandardIfFirstAbility-StandardShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindStandardShotDestination, Child[3]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=SOAI_SelectTarget_HuntWounded, NodeType=RepeatUntilFail, Child[0]=SOAI_EvaluateTargetHuntWounded)
+Behaviors=(BehaviorName=SOAI_EvaluateTargetHuntWounded, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SOAI_SSScoreTargetHuntWounded)
+Behaviors=(BehaviorName=SOAI_SSScoreTargetHuntWounded, NodeType=Successor, Child[0]=SOAI_ScoreTargetHuntWounded)
+Behaviors=(BehaviorName=SOAI_ScoreTargetHuntWounded, NodeType=Sequence, Child[0]=SOAI_TargetIsWounded, Child[1]="::SOAI_TargetEvaluations", Child[2]=UpdateBestTarget)

+Behaviors=(BehaviorName=SOAI_TryBayonet, NodeType=Sequence, Child[0]=IsAbilityReady-Bayonet, Child[1]=SOAI_BayonetStepSelector)
+Behaviors=(BehaviorName=SOAI_BayonetStepSelector, NodeType=Selector, Child[0]=SOAI_BayonetAttack, Child[1]=SOAI_BayonetMove)
+Behaviors=(BehaviorName=SOAI_BayonetAttack, NodeType=Sequence, Child[0]=IsAbilityAvailable-Bayonet, Child[1]=SOAI_SelectTargetForBayonet, Child[2]=SelectAbility-Bayonet)
+Behaviors=(BehaviorName=SOAI_SelectTargetForBayonet, NodeType=Sequence, Child[0]=SetTargetStack-Bayonet, Child[1]=SOAI_SelectBestTargetForBayonet, Child[2]=HasValidTarget-Bayonet)
+Behaviors=(BehaviorName=SOAI_SelectBestTargetForBayonet, NodeType=RepeatUntilFail, Child[0]=SOAI_EvaluatePotentialBayonetTarget)
; Unlike the normal EvaluatePotentialMeleeTarget, this does NOT exclude bound or panicked targets. Mutons are mean.
+Behaviors=(BehaviorName=SOAI_EvaluatePotentialBayonetTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=TargetScoreHealth, Child[3]=TargetScoreCivilian, Child[4]=SSCustomMeleeTargetScore, Child[5]=UpdateBestTarget)

+Behaviors=(BehaviorName=SOAI_BayonetMove, NodeType=Sequence, Child[0]=SOAI_MoveMutonMeleeIfFirstAbility)
+Behaviors=(BehaviorName=SOAI_MoveMutonMeleeIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_Move-MutonMelee)
+Behaviors=(BehaviorName=SOAI_Move-MutonMelee, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_MoveUnsafe-MutonMelee)
+Behaviors=(BehaviorName=SOAI_MoveUnsafe-MutonMelee, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SOAI_FindDestination-MutonMelee, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_DashMove-MutonMelee, NodeType=Sequence, Child[0]="::SOAI_SafeToMove", Child[1]=SOAI_DashMoveUnsafe-MutonMelee)
+Behaviors=(BehaviorName=SOAI_DashMoveUnsafe-MutonMelee, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=UseDashMovement, Child[2]=ResetDestinationSearch, Child[3]=SOAI_FindDestination-MutonMelee, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SOAI_FindDestination-MutonMelee, NodeType=Sequence, Child[0]=IncludeCiviliansIfTerrorist, Child[1]=SelectPotentialMeleeTarget, Child[2]=RestrictToPotentialTargetRange-StandardMelee, Child[3]=FindRestrictedDestination-SOAI_MutonMelee)

; Movement

; A muton has a chance to enter bloodlust if it sees a wounded enemy. The chance is 30% per wounded
; enemy. This works out to the following bloodlust chances:
; Enemies	Chance
; 1			30.0%
; 2			51.0%
; 3			65.7%
; 4			76.0%
; Mutons in bloodlust will tend to charge in and attempt to melee, or fire at wounded enemies in
; preference to other targets.

+Behaviors=(BehaviorName="Muton::SOAI_CheckSpecialBehavior", NodeType=Sequence, Child[0]=SetVisiblePotentialTargetStack, Child[1]=SOAI_RepeatMutonBloodlustRoll, Child[2]=SOAI_BloodlustRollFailed)
+Behaviors=(BehaviorName=SOAI_RepeatMutonBloodlustRoll, NodeType=RepeatUntilFail, Child[0]=SOAI_IterateMutonBloodlustRoll)
+Behaviors=(BehaviorName=SOAI_IterateMutonBloodlustRoll, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SOAI_SSMutonBloodlustRoll, Child[2]=SOAI_BloodlustRollPassed)
+Behaviors=(BehaviorName=SOAI_SSMutonBloodlustRoll, NodeType=Successor, Child[0]=SOAI_MutonBloodlustRoll)
+Behaviors=(BehaviorName=SOAI_MutonBloodlustRoll, NodeType=Sequence, Child[0]=SOAI_TargetIsWounded, Child[1]=SOAI_Roll70ToNotBloodlust)
+Behaviors=(BehaviorName=SOAI_Roll70ToNotBloodlust, NodeType=RandSelector, Child[0]=SOAI_SetBloodlustFalse, Param[0]=70, Child[1]=SOAI_SetBloodlustTrue, Param[1]=30)
+Behaviors=(BehaviorName=SOAI_SetBloodlustTrue, NodeType=Action, Param[0]=SetBTVar, Param[1]="Bloodlust", Param[2]="1")
+Behaviors=(BehaviorName=SOAI_SetBloodlustFalse, NodeType=Action, Param[0]=SetBTVar, Param[1]="Bloodlust", Param[2]="0")
+Behaviors=(BehaviorName=SOAI_BloodlustRollFailed, NodeType=StatCondition, Param[0]=BTVar, Param[1]="!=", Param[2]="0", Param[3]="Bloodlust")
+Behaviors=(BehaviorName=SOAI_BloodlustRollPassed, NodeType=StatCondition, Param[0]=BTVar, Param[1]="==", Param[2]="0", Param[3]="Bloodlust")

; -------------------- Codex --------------------------------------------------

+Behaviors=(BehaviorName="Cyberus::SOAI_CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SOAI_CodexRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="Cyberus::SOAI_FindDestination", NodeType=Sequence, Child[0]=FindDestination-SOAI_Cyberus)
+Behaviors=(BehaviorName="Cyberus::SOAI_FindRestrictedDestination", NodeType=Sequence, Child[0]=FindRestrictedDestination-SOAI_Cyberus)
+Behaviors=(BehaviorName="Cyberus::SOAI_TargetEvaluations", NodeType=Sequence, Child[0]=SOAI_CyberusTargetEvaluations)

+Behaviors=(BehaviorName=SOAI_CodexRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SOAI_CodexRedAbilitySelector)
+Behaviors=(BehaviorName=SOAI_CodexRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior,  Child[1]=SOAI_CodexRedFirstAction, Child[2]=SOAI_CodexRedLastAction)
+Behaviors=(BehaviorName=SOAI_CodexRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SOAI_CodexRedFirstActionSelector)
+Behaviors=(BehaviorName=SOAI_CodexRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SOAI_CodexRedLastActionSelector)

+Behaviors=(BehaviorName=SOAI_CodexRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenPsiBomb, \\
	Child[1]=SOAI_TryHuntSkulljacker, \\
	Child[2]=SOAI_DoIfFlankedMove, \\
	Child[3]=SOAI_MoveOrTeleport, \\
	Child[4]=SOAI_TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SOAI_CodexRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryPsiBomb, \\
	Child[1]=SOAI_TryHuntSkulljacker, \\
	Child[2]=SOAI_TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SOAI_MoveOrTeleport)

+Behaviors=(BehaviorName=SOAI_CyberusTargetEvaluations, NodeType=Sequence, \\
	Child[0]=GenericTargetEvaluations, \\
	Child[1]=SOAI_TargetScoreIfSkulljack)

+Behaviors=(BehaviorName=SOAI_MoveOrTeleportIfFirstAbility-StandardShot, NodeType=Selector, Child[0]=SOAI_TeleportIfFirstAbility-StandardShot, Child[1]=SOAI_MoveStandardIfFirstAbility-StandardShot)
+Behaviors=(BehaviorName=SOAI_TeleportIfFirstAbility-StandardShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-Teleport, Child[1]=NotLastActionPoint, Child[2]=SOAI_FindStandardShotDestination_Teleport, Child[3]=SelectAbility-Teleport)
+Behaviors=(BehaviorName=SOAI_FindStandardShotDestination_Teleport, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-StandardShot, Child[2]=RestrictToEnemyLoS, Child[3]=UseDashMovement, Child[4]="::SOAI_FindRestrictedDestination")

+Behaviors=(BehaviorName=SOAI_TryHuntSkulljacker, NodeType=Selector, Child[0]=SOAI_TryMoveForHuntSkulljacker, Child[1]=SOAI_ShootSkulljacker)
+Behaviors=(BehaviorName=SOAI_TryMoveForHuntSkulljacker, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]="::SOAI_SafeToMove", Child[2]=IsAbilityAvailable-StandardShot, Child[3]=SetVisiblePotentialTargetStack, Child[4]=SOAI_SelectTarget_HuntSkulljacker, Child[5]=SOAI_MoveOrTeleportIfFirstAbility-StandardShot)
+Behaviors=(BehaviorName=SOAI_SelectTarget_HuntSkulljacker, NodeType=RepeatUntilFail, Child[0]=SOAI_EvaluateTargetHuntSkulljacker)
+Behaviors=(BehaviorName=SOAI_EvaluateTargetHuntSkulljacker, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SOAI_SSScoreTargetHuntSkulljacker)
+Behaviors=(BehaviorName=SOAI_SSScoreTargetHuntSkulljacker, NodeType=Successor, Child[0]=SOAI_ScoreTargetHuntSkulljacker)
+Behaviors=(BehaviorName=SOAI_ScoreTargetHuntSkulljacker, NodeType=Sequence, Child[0]=DoesTargetHaveItem-Skulljack, Child[1]=TargetScoreHealth, Child[2]=TargetScoreMarked, Child[3]=TargetScoreCivilian, Child[4]=AddToTargetScore_10, Child[5]=UpdateBestTarget)

+Behaviors=(BehaviorName=SOAI_ShootSkulljacker, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SetTargetStack-StandardShot, Child[2]=SOAI_SelectTarget_HuntSkulljacker, Child[3]=HasValidTarget-StandardShot, Child[4]=SelectAbility-StandardShot) 
